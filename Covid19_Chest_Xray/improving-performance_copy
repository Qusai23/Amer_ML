{"nbformat":4,"nbformat_minor":0,"metadata":{"colab":{"name":"improving-performance_copy","provenance":[],"collapsed_sections":[],"toc_visible":true},"kernelspec":{"name":"python3","display_name":"Python 3"},"accelerator":"GPU"},"cells":[{"cell_type":"code","metadata":{"id":"avyPQuDYT8Gw","executionInfo":{"status":"ok","timestamp":1605240537241,"user_tz":360,"elapsed":5326,"user":{"displayName":"Keishla Ortiz-Lopez","photoUrl":"","userId":"06981869965925195490"}},"outputId":"1050326e-b05a-403a-9505-43f1a28a13c8","colab":{"base_uri":"https://localhost:8080/"}},"source":["#this first block loads several modules that we may or may not use\n","#it serves as a check that you have them installed\n","\n","from math import floor, sqrt, pi\n","from random import sample\n","\n","import numpy as np\n","from sklearn.tree import DecisionTreeClassifier\n","import pandas as pd\n","\n","%matplotlib inline\n","import matplotlib.pyplot as plot\n","plot.rcParams[\"figure.figsize\"] = (20, 10) # (w, h)\n","import torch\n","import torch.nn as nn\n","\n","#scikit image libs\n","from skimage import io, exposure\n","from skimage.util import img_as_float\n","from skimage.color import rgb2gray\n","from skimage.filters import frangi, meijering, prewitt, gabor\n","from skimage.feature import hog\n","\n","#pathing libraries\n","import os\n","import glob\n","\n","#loading images from Google Drive\n","from google.colab import drive\n","\n","print(\"Modules loaded\")"],"execution_count":null,"outputs":[{"output_type":"stream","text":["Modules loaded\n"],"name":"stdout"}]},{"cell_type":"code","metadata":{"id":"E3_2htdfWFTh","executionInfo":{"status":"ok","timestamp":1605240591698,"user_tz":360,"elapsed":28636,"user":{"displayName":"Keishla Ortiz-Lopez","photoUrl":"","userId":"06981869965925195490"}},"outputId":"4b49fcd1-b625-421e-8712-c2b46b0b0d3e","colab":{"base_uri":"https://localhost:8080/"}},"source":["#Access to Google Drive content\n","drive.mount('/content/drive')"],"execution_count":null,"outputs":[{"output_type":"stream","text":["Mounted at /content/drive\n"],"name":"stdout"}]},{"cell_type":"code","metadata":{"id":"4UVwca-nWGzZ","executionInfo":{"status":"ok","timestamp":1605240595489,"user_tz":360,"elapsed":1078,"user":{"displayName":"Keishla Ortiz-Lopez","photoUrl":"","userId":"06981869965925195490"}},"outputId":"17feabb6-59ab-4802-891e-eeee2d417e19","colab":{"base_uri":"https://localhost:8080/"}},"source":["#basic directory information\n","\n","basePath = '/content/drive/My Drive/CSCE633HW5'\n","print(os.listdir(basePath))\n","\n","train_dir = basePath + '/train_PREPROCESSED/' #destination of where images will be saved\n","test_dir = basePath + '/test_PREPROCESSED/' #destination of where images will be saved"],"execution_count":null,"outputs":[{"output_type":"stream","text":["['Report.gdoc', 'train', 'test', 'test_PREPROCESSED', 'train_PREPROCESSED', 'test.csv', 'train.csv', 'Project breakdown.gdoc', 'feature_extraction.ipynb', 'adaboost', 'improving-performance', 'train_CNN', 'PREPROCESSING.ipynb', 'improving-performance_copy']\n"],"name":"stdout"}]},{"cell_type":"code","metadata":{"id":"pk0KzhBCWHXx"},"source":["#file listing and  loading\n","\n","def test_extension(f):\n","  extensions = ['.jpg', '.JPG', '.jpeg', '.JPEG', '.png', '.PNG']\n","  ftitle, fext = os.path.splitext(os.path.basename(f))\n","  for ext in extensions:\n","    if(fext == ext):\n","      return True\n","  return False\n","\n","#gets files in the given directory that match our extensions (images)\n","def get_files(dir):\n","  return [f for f in os.listdir(dir) if test_extension(f)]\n","\n","#opens the image file as an skimage\n","def get_image(dir, f):\n","  return img_as_float(io.imread(os.path.join(dir, f)))\n","\n","def normalize(img):\n","  return (img - img.mean()) / img.std()"],"execution_count":null,"outputs":[]},{"cell_type":"code","metadata":{"id":"as7DJ-XjjK9F","executionInfo":{"status":"error","timestamp":1605240611759,"user_tz":360,"elapsed":577,"user":{"displayName":"Keishla Ortiz-Lopez","photoUrl":"","userId":"06981869965925195490"}},"outputId":"e6f8da9f-8717-4565-cff9-fcf6fa506db4","colab":{"base_uri":"https://localhost:8080/","height":164}},"source":["img.shape"],"execution_count":null,"outputs":[{"output_type":"error","ename":"NameError","evalue":"ignored","traceback":["\u001b[0;31m---------------------------------------------------------------------------\u001b[0m","\u001b[0;31mNameError\u001b[0m                                 Traceback (most recent call last)","\u001b[0;32m<ipython-input-7-32ad6cb7aa56>\u001b[0m in \u001b[0;36m<module>\u001b[0;34m()\u001b[0m\n\u001b[0;32m----> 1\u001b[0;31m \u001b[0mimg\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mshape\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m","\u001b[0;31mNameError\u001b[0m: name 'img' is not defined"]}]},{"cell_type":"code","metadata":{"id":"RdiEHJ03wE7k"},"source":["#Load data\n","import pandas as pd\n","\n","\n","train_data = pd.read_csv('/content/drive/My Drive/CSCE633HW5/train.csv')\n","test_data = pd.read_csv('/content/drive/My Drive/CSCE633HW5/test.csv')"],"execution_count":null,"outputs":[]},{"cell_type":"code","metadata":{"id":"3FG0m2eKx2L3","executionInfo":{"status":"ok","timestamp":1605240624219,"user_tz":360,"elapsed":421,"user":{"displayName":"Keishla Ortiz-Lopez","photoUrl":"","userId":"06981869965925195490"}},"outputId":"e4299262-a83c-4713-a1b9-dc6e32fcbe0e","colab":{"base_uri":"https://localhost:8080/","height":142}},"source":["train_data.head(3)"],"execution_count":null,"outputs":[{"output_type":"execute_result","data":{"text/html":["<div>\n","<style scoped>\n","    .dataframe tbody tr th:only-of-type {\n","        vertical-align: middle;\n","    }\n","\n","    .dataframe tbody tr th {\n","        vertical-align: top;\n","    }\n","\n","    .dataframe thead th {\n","        text-align: right;\n","    }\n","</style>\n","<table border=\"1\" class=\"dataframe\">\n","  <thead>\n","    <tr style=\"text-align: right;\">\n","      <th></th>\n","      <th>filename</th>\n","      <th>gender</th>\n","      <th>age</th>\n","      <th>location</th>\n","      <th>covid(label)</th>\n","    </tr>\n","  </thead>\n","  <tbody>\n","    <tr>\n","      <th>0</th>\n","      <td>img_0.jpeg</td>\n","      <td>F</td>\n","      <td>70.0</td>\n","      <td>Valencia, Spain</td>\n","      <td>1</td>\n","    </tr>\n","    <tr>\n","      <th>1</th>\n","      <td>img_1.jpeg</td>\n","      <td>F</td>\n","      <td>30.0</td>\n","      <td>University of California Irvine, Orange, Calif...</td>\n","      <td>1</td>\n","    </tr>\n","    <tr>\n","      <th>2</th>\n","      <td>img_10.jpg</td>\n","      <td>F</td>\n","      <td>40.0</td>\n","      <td>Cairo, Egypt</td>\n","      <td>0</td>\n","    </tr>\n","  </tbody>\n","</table>\n","</div>"],"text/plain":["     filename  ... covid(label)\n","0  img_0.jpeg  ...            1\n","1  img_1.jpeg  ...            1\n","2  img_10.jpg  ...            0\n","\n","[3 rows x 5 columns]"]},"metadata":{"tags":[]},"execution_count":9}]},{"cell_type":"code","metadata":{"id":"-nTkmKEVyQfN"},"source":["#get the imags and labels \n","\n","def get_imgs(dataframe,dir):\n","  imgs = []\n","  for i in range(0,len(dataframe)):\n","      ig = get_image(dir, dataframe.iloc[i]['filename']) #match the order of the images in the dataframe and train_dir \n","      imgs.append(ig)                                           #add all the images in a big array \n","  return np.array(imgs,dtype='float32')\n","\n","train_imgs = get_imgs(train_data,train_dir)\n"],"execution_count":null,"outputs":[]},{"cell_type":"code","metadata":{"id":"ILVb-_qGsiYu","executionInfo":{"status":"ok","timestamp":1605240748387,"user_tz":360,"elapsed":465,"user":{"displayName":"Keishla Ortiz-Lopez","photoUrl":"","userId":"06981869965925195490"}},"outputId":"c8fa544b-638d-4d4c-ffc9-d231fd2bb46a","colab":{"base_uri":"https://localhost:8080/"}},"source":["train_imgs.shape"],"execution_count":null,"outputs":[{"output_type":"execute_result","data":{"text/plain":["(250, 200, 200, 3)"]},"metadata":{"tags":[]},"execution_count":11}]},{"cell_type":"code","metadata":{"id":"_FhD1gyKrS_-"},"source":["#get the labels (outcome) as an array \n","def get_labels(dataframe):\n","  labels = dataframe['covid(label)']\n","  return labels.to_numpy()\n","y = get_labels(train_data)"],"execution_count":null,"outputs":[]},{"cell_type":"markdown","metadata":{"id":"4CguISQjLPUX"},"source":["c. Improving performance using CNN"]},{"cell_type":"code","metadata":{"id":"fBz_jWeVM64B"},"source":["#use 100x100 images\n","train_dir_CNN = basePath + '/train_CNN/'\n","train_imgs_CNN = get_imgs(train_data,train_dir_CNN)\n","train_labels = get_labels(train_data)"],"execution_count":null,"outputs":[]},{"cell_type":"code","metadata":{"id":"5BVduO_pmQ5X","executionInfo":{"status":"ok","timestamp":1605240857801,"user_tz":360,"elapsed":331,"user":{"displayName":"Keishla Ortiz-Lopez","photoUrl":"","userId":"06981869965925195490"}},"outputId":"e56d2f54-1d12-4a09-e2b2-25c37db858d4","colab":{"base_uri":"https://localhost:8080/"}},"source":["train_imgs_CNN.shape"],"execution_count":null,"outputs":[{"output_type":"execute_result","data":{"text/plain":["(250, 100, 100, 3)"]},"metadata":{"tags":[]},"execution_count":14}]},{"cell_type":"code","metadata":{"id":"YSJsPbCxV_a-"},"source":["import tensorflow as tf\n","import timeit\n","\n","device_name = tf.test.gpu_device_name()\n","if device_name != '/device:GPU:0':\n","  print(\n","      '\\n\\nThis error most likely means that this notebook is not '\n","      'configured to use a GPU.  Change this in Notebook Settings via the '\n","      'command palette (cmd/ctrl-shift-P) or the Edit menu.\\n\\n')\n","  raise SystemError('GPU device not found')"],"execution_count":null,"outputs":[]},{"cell_type":"code","metadata":{"id":"d6jXcppEp4t6","executionInfo":{"status":"ok","timestamp":1605241876037,"user_tz":360,"elapsed":88955,"user":{"displayName":"Keishla Ortiz-Lopez","photoUrl":"","userId":"06981869965925195490"}},"outputId":"be64494c-2c4f-4772-8104-1399c14dc505","colab":{"base_uri":"https://localhost:8080/"}},"source":["#Reference link for cross-validation with CNN: https://medium.com/@navmcgill/k-fold-cross-validation-in-keras-convolutional-neural-networks-835bed559d04\n","\n","from sklearn.model_selection import train_test_split\n","from keras.models import Sequential\n","from keras.layers import Dense, Dropout\n","from hyperopt import hp, fmin, tpe, STATUS_OK, Trials\n","from tensorflow.keras.layers import Conv2D, Flatten, MaxPooling2D\n","import time\n","from keras.utils import to_categorical\n","\n","def optimize_cnn(hyperparameter):\n","  \n","  layers = [Conv2D(32, kernel_size=hyperparameter['conv_kernel_size'], strides = hyperparameter['conv_stride'], activation=hyperparameter['activation'], input_shape=(100,100,3)), \n","            Conv2D(32, kernel_size=hyperparameter['conv_kernel_size'], strides = hyperparameter['conv_stride'], activation=hyperparameter['activation']), \n","            MaxPooling2D(pool_size=(2,2),padding='same'), Dropout(hyperparameter['dropout_prob']),\n","            Conv2D(64, kernel_size=hyperparameter['conv_kernel_size'], strides = hyperparameter['conv_stride'], activation=hyperparameter['activation']),\n","            Conv2D(64, kernel_size=hyperparameter['conv_kernel_size'], strides = hyperparameter['conv_stride'], activation=hyperparameter['activation']), \n","            MaxPooling2D(pool_size=(2,2),padding='same'), Dropout(hyperparameter['dropout_prob']),\n","            Conv2D(32, kernel_size=hyperparameter['conv_kernel_size'], strides = hyperparameter['conv_stride'], activation=hyperparameter['activation']),\n","            Conv2D(32, kernel_size=hyperparameter['conv_kernel_size'], strides = hyperparameter['conv_stride'], activation=hyperparameter['activation']),\n","            MaxPooling2D(pool_size=(2,2),padding='same'), Dropout(hyperparameter['dropout_prob']),\n","            Flatten(),\n","            Dense(512,activation='relu'), #dense layer 1\n","            Dense(256,activation='relu'), #dense layer 2\n","            Dense(2,activation='softmax'), #dense layer 3\n","            ] \n","\n","  # Define model using hyperparameters \n","  used_layers = [layers[i] for i in hyperparameter['layer_ids']]+layers[12:]\n","  cnn_model = Sequential(used_layers)\n","  print(cnn_model.summary())\n","  cnn_model.compile(optimizer='adam', loss='categorical_crossentropy', metrics=['accuracy'],)\n","  \n","  v_scores = []\n","  t_scores = []\n","  start_time = time.time()\n","  for i in range(5):\n","    X_train, X_val, y_train, y_val = train_test_split(train_imgs_CNN, train_labels, test_size=0.20, random_state = np.random.randint(1,1000, 1)[0])\n","    results = cnn_model.fit(X_train, to_categorical(y_train), validation_data=(X_val, to_categorical(y_val)), epochs=30, batch_size=52, verbose=0)\n","    t_performance = results.history['accuracy'][-1]\n","    _, v_performance = cnn_model.evaluate(X_val, to_categorical(y_val), verbose = 0)\n","    v_scores.append(v_performance)\n","    t_scores.append(t_performance)\n","  end_time = time.time()\n","  print(\"Training accuracy: {}\\nTraining time: {}\".format(sum(t_scores)/len(t_scores), end_time-start_time))\n","\n","  # Evaluate accuracy on validation data\n","  #performance = cnn_model.evaluate(fnn_val_proc, to_categorical(val_labels), verbose=0)\n","  averagePerformance = sum(v_scores)/len(v_scores)\n","  print(\"Hyperparameters: \", hyperparameter, \"Validation Accuracy: \", averagePerformance)\n","  print(\"----------------------------------------------------\")\n","  # We want to minimize loss i.e. negative of accuracy\n","  return({\"status\": STATUS_OK, \"loss\": -1*averagePerformance, \"model\":cnn_model})\n","\n","# Define search space for hyper-parameters\n","space = {\n","    'layer_ids': hp.choice('layer_ids',[[0,2,3,4,6,7],[0,1,2,3],[0,2,3,8,10,11],[0,2,3]]),\n","    'conv_kernel_size': hp.choice('conv_kernel_size',[1,3,5]),\n","    'conv_stride': hp.choice('conv_stride',[1,2]),\n","    'activation': hp.choice('activation', ['relu','selu','tanh']),\n","    'dropout_prob': hp.uniform('dropout_prob',0,0.35),\n","}\n","\n","trials = Trials()\n","with tf.device('/device:GPU:0'):\n","  # Find the best hyperparameters\n","  best = fmin(\n","          optimize_cnn,\n","          space,\n","          algo=tpe.suggest,\n","          trials=trials,\n","          max_evals=10,\n","      )\n","\n","  print(\"==================================\")\n","  print(\"Best Hyperparameters\", best)\n","\n","  # You can retrain the final model with optimal hyperparameters on train+validation data\n","\n","  # Or you can use the model returned directly\n","  # Find trial which has minimum loss value and use that model to perform evaluation on the test data\n","  test_model = trials.results[np.argmin([r['loss'] for r in trials.results])]['model']\n","\n","  #for bonus question if we have time :)\n","  #performance = test_model.evaluate(fnn_test_proc, to_categorical(test_labels))\n","\n","  #print(\"==================================\")\n","  #print(\"Test Accuracy: \", performance[1])"],"execution_count":null,"outputs":[{"output_type":"stream","text":["Model: \"sequential_10\"\n","_________________________________________________________________\n","Layer (type)                 Output Shape              Param #   \n","=================================================================\n","conv2d_60 (Conv2D)           (None, 98, 98, 32)        896       \n","_________________________________________________________________\n","max_pooling2d_30 (MaxPooling (None, 49, 49, 32)        0         \n","_________________________________________________________________\n","dropout_30 (Dropout)         (None, 49, 49, 32)        0         \n","_________________________________________________________________\n","conv2d_64 (Conv2D)           (None, 47, 47, 32)        9248      \n","_________________________________________________________________\n","max_pooling2d_32 (MaxPooling (None, 24, 24, 32)        0         \n","_________________________________________________________________\n","dropout_32 (Dropout)         (None, 24, 24, 32)        0         \n","_________________________________________________________________\n","flatten_10 (Flatten)         (None, 18432)             0         \n","_________________________________________________________________\n","dense_30 (Dense)             (None, 512)               9437696   \n","_________________________________________________________________\n","dense_31 (Dense)             (None, 256)               131328    \n","_________________________________________________________________\n","dense_32 (Dense)             (None, 2)                 514       \n","=================================================================\n","Total params: 9,579,682\n","Trainable params: 9,579,682\n","Non-trainable params: 0\n","_________________________________________________________________\n","None\n","Training accuracy: 0.9529999971389771\n","Training time: 9.667906522750854\n","Hyperparameters: \n","{'activation': 'selu', 'conv_kernel_size': 3, 'conv_stride': 1, 'dropout_prob': 0.2324184487466996, 'layer_ids': (0, 2, 3, 8, 10, 11)}\n","Validation Accuracy: \n","0.7599999904632568\n","----------------------------------------------------\n","Model: \"sequential_11\"\n","_________________________________________________________________\n","Layer (type)                 Output Shape              Param #   \n","=================================================================\n","conv2d_66 (Conv2D)           (None, 100, 100, 32)      128       \n","_________________________________________________________________\n","max_pooling2d_33 (MaxPooling (None, 50, 50, 32)        0         \n","_________________________________________________________________\n","dropout_33 (Dropout)         (None, 50, 50, 32)        0         \n","_________________________________________________________________\n","conv2d_70 (Conv2D)           (None, 50, 50, 32)        1056      \n","_________________________________________________________________\n","max_pooling2d_35 (MaxPooling (None, 25, 25, 32)        0         \n","_________________________________________________________________\n","dropout_35 (Dropout)         (None, 25, 25, 32)        0         \n","_________________________________________________________________\n","flatten_11 (Flatten)         (None, 20000)             0         \n","_________________________________________________________________\n","dense_33 (Dense)             (None, 512)               10240512  \n","_________________________________________________________________\n","dense_34 (Dense)             (None, 256)               131328    \n","_________________________________________________________________\n","dense_35 (Dense)             (None, 2)                 514       \n","=================================================================\n","Total params: 10,373,538\n","Trainable params: 10,373,538\n","Non-trainable params: 0\n","_________________________________________________________________\n","None\n","Training accuracy: 0.9190000057220459\n","Training time: 9.248157262802124\n","Hyperparameters: \n","{'activation': 'tanh', 'conv_kernel_size': 1, 'conv_stride': 1, 'dropout_prob': 0.07518739948508335, 'layer_ids': (0, 2, 3, 8, 10, 11)}\n","Validation Accuracy: \n","0.7520000100135803\n","----------------------------------------------------\n","Model: \"sequential_12\"\n","_________________________________________________________________\n","Layer (type)                 Output Shape              Param #   \n","=================================================================\n","conv2d_72 (Conv2D)           (None, 48, 48, 32)        2432      \n","_________________________________________________________________\n","conv2d_73 (Conv2D)           (None, 22, 22, 32)        25632     \n","_________________________________________________________________\n","max_pooling2d_36 (MaxPooling (None, 11, 11, 32)        0         \n","_________________________________________________________________\n","dropout_36 (Dropout)         (None, 11, 11, 32)        0         \n","_________________________________________________________________\n","flatten_12 (Flatten)         (None, 3872)              0         \n","_________________________________________________________________\n","dense_36 (Dense)             (None, 512)               1982976   \n","_________________________________________________________________\n","dense_37 (Dense)             (None, 256)               131328    \n","_________________________________________________________________\n","dense_38 (Dense)             (None, 2)                 514       \n","=================================================================\n","Total params: 2,142,882\n","Trainable params: 2,142,882\n","Non-trainable params: 0\n","_________________________________________________________________\n","None\n","Training accuracy: 0.9529999971389771\n","Training time: 7.607634544372559\n","Hyperparameters: \n","{'activation': 'selu', 'conv_kernel_size': 5, 'conv_stride': 2, 'dropout_prob': 0.009337037088790917, 'layer_ids': (0, 1, 2, 3)}\n","Validation Accuracy: \n","0.8759999990463256\n","----------------------------------------------------\n","Model: \"sequential_13\"\n","_________________________________________________________________\n","Layer (type)                 Output Shape              Param #   \n","=================================================================\n","conv2d_78 (Conv2D)           (None, 98, 98, 32)        896       \n","_________________________________________________________________\n","max_pooling2d_39 (MaxPooling (None, 49, 49, 32)        0         \n","_________________________________________________________________\n","dropout_39 (Dropout)         (None, 49, 49, 32)        0         \n","_________________________________________________________________\n","flatten_13 (Flatten)         (None, 76832)             0         \n","_________________________________________________________________\n","dense_39 (Dense)             (None, 512)               39338496  \n","_________________________________________________________________\n","dense_40 (Dense)             (None, 256)               131328    \n","_________________________________________________________________\n","dense_41 (Dense)             (None, 2)                 514       \n","=================================================================\n","Total params: 39,471,234\n","Trainable params: 39,471,234\n","Non-trainable params: 0\n","_________________________________________________________________\n","None\n","Training accuracy: 0.997000002861023\n","Training time: 10.67262578010559\n","Hyperparameters: \n","{'activation': 'relu', 'conv_kernel_size': 3, 'conv_stride': 1, 'dropout_prob': 0.1765110177557947, 'layer_ids': (0, 2, 3)}\n","Validation Accuracy: \n","0.9160000085830688\n","----------------------------------------------------\n","Model: \"sequential_14\"\n","_________________________________________________________________\n","Layer (type)                 Output Shape              Param #   \n","=================================================================\n","conv2d_84 (Conv2D)           (None, 49, 49, 32)        896       \n","_________________________________________________________________\n","max_pooling2d_42 (MaxPooling (None, 25, 25, 32)        0         \n","_________________________________________________________________\n","dropout_42 (Dropout)         (None, 25, 25, 32)        0         \n","_________________________________________________________________\n","conv2d_88 (Conv2D)           (None, 12, 12, 32)        9248      \n","_________________________________________________________________\n","max_pooling2d_44 (MaxPooling (None, 6, 6, 32)          0         \n","_________________________________________________________________\n","dropout_44 (Dropout)         (None, 6, 6, 32)          0         \n","_________________________________________________________________\n","flatten_14 (Flatten)         (None, 1152)              0         \n","_________________________________________________________________\n","dense_42 (Dense)             (None, 512)               590336    \n","_________________________________________________________________\n","dense_43 (Dense)             (None, 256)               131328    \n","_________________________________________________________________\n","dense_44 (Dense)             (None, 2)                 514       \n","=================================================================\n","Total params: 732,322\n","Trainable params: 732,322\n","Non-trainable params: 0\n","_________________________________________________________________\n","None\n","Training accuracy: 0.9170000076293945\n","Training time: 7.060582160949707\n","Hyperparameters: \n","{'activation': 'tanh', 'conv_kernel_size': 3, 'conv_stride': 2, 'dropout_prob': 0.18376374981114305, 'layer_ids': (0, 2, 3, 8, 10, 11)}\n","Validation Accuracy: \n","0.8360000014305115\n","----------------------------------------------------\n","Model: \"sequential_15\"\n","_________________________________________________________________\n","Layer (type)                 Output Shape              Param #   \n","=================================================================\n","conv2d_90 (Conv2D)           (None, 49, 49, 32)        896       \n","_________________________________________________________________\n","max_pooling2d_45 (MaxPooling (None, 25, 25, 32)        0         \n","_________________________________________________________________\n","dropout_45 (Dropout)         (None, 25, 25, 32)        0         \n","_________________________________________________________________\n","flatten_15 (Flatten)         (None, 20000)             0         \n","_________________________________________________________________\n","dense_45 (Dense)             (None, 512)               10240512  \n","_________________________________________________________________\n","dense_46 (Dense)             (None, 256)               131328    \n","_________________________________________________________________\n","dense_47 (Dense)             (None, 2)                 514       \n","=================================================================\n","Total params: 10,373,250\n","Trainable params: 10,373,250\n","Non-trainable params: 0\n","_________________________________________________________________\n","None\n","Training accuracy: 0.9700000047683716\n","Training time: 7.1566455364227295\n","Hyperparameters: \n","{'activation': 'selu', 'conv_kernel_size': 3, 'conv_stride': 2, 'dropout_prob': 0.014146702058326154, 'layer_ids': (0, 2, 3)}\n","Validation Accuracy: \n","0.9120000004768372\n","----------------------------------------------------\n","Model: \"sequential_16\"\n","_________________________________________________________________\n","Layer (type)                 Output Shape              Param #   \n","=================================================================\n","conv2d_96 (Conv2D)           (None, 48, 48, 32)        2432      \n","_________________________________________________________________\n","max_pooling2d_48 (MaxPooling (None, 24, 24, 32)        0         \n","_________________________________________________________________\n","dropout_48 (Dropout)         (None, 24, 24, 32)        0         \n","_________________________________________________________________\n","conv2d_98 (Conv2D)           (None, 10, 10, 64)        51264     \n","_________________________________________________________________\n","max_pooling2d_49 (MaxPooling (None, 5, 5, 64)          0         \n","_________________________________________________________________\n","dropout_49 (Dropout)         (None, 5, 5, 64)          0         \n","_________________________________________________________________\n","flatten_16 (Flatten)         (None, 1600)              0         \n","_________________________________________________________________\n","dense_48 (Dense)             (None, 512)               819712    \n","_________________________________________________________________\n","dense_49 (Dense)             (None, 256)               131328    \n","_________________________________________________________________\n","dense_50 (Dense)             (None, 2)                 514       \n","=================================================================\n","Total params: 1,005,250\n","Trainable params: 1,005,250\n","Non-trainable params: 0\n","_________________________________________________________________\n","None\n","Training accuracy: 0.9149999976158142\n","Training time: 7.194074630737305\n","Hyperparameters: \n","{'activation': 'selu', 'conv_kernel_size': 5, 'conv_stride': 2, 'dropout_prob': 0.30944942584027896, 'layer_ids': (0, 2, 3, 4, 6, 7)}\n","Validation Accuracy: \n","0.8559999942779541\n","----------------------------------------------------\n","Model: \"sequential_17\"\n","_________________________________________________________________\n","Layer (type)                 Output Shape              Param #   \n","=================================================================\n","conv2d_102 (Conv2D)          (None, 50, 50, 32)        128       \n","_________________________________________________________________\n","max_pooling2d_51 (MaxPooling (None, 25, 25, 32)        0         \n","_________________________________________________________________\n","dropout_51 (Dropout)         (None, 25, 25, 32)        0         \n","_________________________________________________________________\n","flatten_17 (Flatten)         (None, 20000)             0         \n","_________________________________________________________________\n","dense_51 (Dense)             (None, 512)               10240512  \n","_________________________________________________________________\n","dense_52 (Dense)             (None, 256)               131328    \n","_________________________________________________________________\n","dense_53 (Dense)             (None, 2)                 514       \n","=================================================================\n","Total params: 10,372,482\n","Trainable params: 10,372,482\n","Non-trainable params: 0\n","_________________________________________________________________\n","None\n","Training accuracy: 0.9360000133514405\n","Training time: 7.153953790664673\n","Hyperparameters: \n","{'activation': 'relu', 'conv_kernel_size': 1, 'conv_stride': 2, 'dropout_prob': 0.2879081689423817, 'layer_ids': (0, 2, 3)}\n","Validation Accuracy: \n","0.7919999957084656\n","----------------------------------------------------\n","Model: \"sequential_18\"\n","_________________________________________________________________\n","Layer (type)                 Output Shape              Param #   \n","=================================================================\n","conv2d_108 (Conv2D)          (None, 100, 100, 32)      128       \n","_________________________________________________________________\n","max_pooling2d_54 (MaxPooling (None, 50, 50, 32)        0         \n","_________________________________________________________________\n","dropout_54 (Dropout)         (None, 50, 50, 32)        0         \n","_________________________________________________________________\n","conv2d_112 (Conv2D)          (None, 50, 50, 32)        1056      \n","_________________________________________________________________\n","max_pooling2d_56 (MaxPooling (None, 25, 25, 32)        0         \n","_________________________________________________________________\n","dropout_56 (Dropout)         (None, 25, 25, 32)        0         \n","_________________________________________________________________\n","flatten_18 (Flatten)         (None, 20000)             0         \n","_________________________________________________________________\n","dense_54 (Dense)             (None, 512)               10240512  \n","_________________________________________________________________\n","dense_55 (Dense)             (None, 256)               131328    \n","_________________________________________________________________\n","dense_56 (Dense)             (None, 2)                 514       \n","=================================================================\n","Total params: 10,373,538\n","Trainable params: 10,373,538\n","Non-trainable params: 0\n","_________________________________________________________________\n","None\n","Training accuracy: 0.9000000119209289\n","Training time: 9.079967498779297\n","Hyperparameters: \n","{'activation': 'tanh', 'conv_kernel_size': 1, 'conv_stride': 1, 'dropout_prob': 0.15107252028427826, 'layer_ids': (0, 2, 3, 8, 10, 11)}\n","Validation Accuracy: \n","0.7120000123977661\n","----------------------------------------------------\n","Model: \"sequential_19\"\n","_________________________________________________________________\n","Layer (type)                 Output Shape              Param #   \n","=================================================================\n","conv2d_114 (Conv2D)          (None, 96, 96, 32)        2432      \n","_________________________________________________________________\n","max_pooling2d_57 (MaxPooling (None, 48, 48, 32)        0         \n","_________________________________________________________________\n","dropout_57 (Dropout)         (None, 48, 48, 32)        0         \n","_________________________________________________________________\n","conv2d_118 (Conv2D)          (None, 44, 44, 32)        25632     \n","_________________________________________________________________\n","max_pooling2d_59 (MaxPooling (None, 22, 22, 32)        0         \n","_________________________________________________________________\n","dropout_59 (Dropout)         (None, 22, 22, 32)        0         \n","_________________________________________________________________\n","flatten_19 (Flatten)         (None, 15488)             0         \n","_________________________________________________________________\n","dense_57 (Dense)             (None, 512)               7930368   \n","_________________________________________________________________\n","dense_58 (Dense)             (None, 256)               131328    \n","_________________________________________________________________\n","dense_59 (Dense)             (None, 2)                 514       \n","=================================================================\n","Total params: 8,090,274\n","Trainable params: 8,090,274\n","Non-trainable params: 0\n","_________________________________________________________________\n","None\n","Training accuracy: 0.931000006198883\n","Training time: 9.781844854354858\n","Hyperparameters: \n","{'activation': 'tanh', 'conv_kernel_size': 5, 'conv_stride': 1, 'dropout_prob': 0.17608876887514854, 'layer_ids': (0, 2, 3, 8, 10, 11)}\n","Validation Accuracy: \n","0.8040000081062317\n","----------------------------------------------------\n","100%|██████████| 10/10 [01:27<00:00,  8.77s/it, best loss: -0.9160000085830688]\n","==================================\n","Best Hyperparameters {'activation': 0, 'conv_kernel_size': 1, 'conv_stride': 0, 'dropout_prob': 0.1765110177557947, 'layer_ids': 3}\n"],"name":"stdout"}]}]}