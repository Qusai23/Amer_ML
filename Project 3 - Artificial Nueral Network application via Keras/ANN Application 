{"nbformat":4,"nbformat_minor":0,"metadata":{"kernelspec":{"display_name":"Python 3","language":"python","name":"python3"},"language_info":{"codemirror_mode":{"name":"ipython","version":3},"file_extension":".py","mimetype":"text/x-python","name":"python","nbconvert_exporter":"python","pygments_lexer":"ipython3","version":"3.7.6"},"colab":{"name":"HW3-Copy1.ipynb","provenance":[],"collapsed_sections":["D8KOp1ZxRgU3","YXQBA1M0RgVG","BTyEeRdxRgVa"]},"accelerator":"GPU"},"cells":[{"cell_type":"code","metadata":{"id":"Bjdehqm5RgRz","executionInfo":{"status":"ok","timestamp":1603327034126,"user_tz":300,"elapsed":1808,"user":{"displayName":"Qusai Amer","photoUrl":"https://lh6.googleusercontent.com/-jAP82gBhj-8/AAAAAAAAAAI/AAAAAAAAA9Y/SV0jzmWT_-E/s64/photo.jpg","userId":"00843738786401489735"}}},"source":["# Import required packages and read data into dataframe via pandas\n","\n","import pandas as pd\n","import matplotlib.cm as cm\n","import warnings\n","import matplotlib.pyplot as plt\n","import numpy as np\n","warnings.filterwarnings(\"ignore\")\n","from keras.datasets import mnist\n","from keras.utils import to_categorical\n","\n"],"execution_count":1,"outputs":[]},{"cell_type":"code","metadata":{"id":"WYqz0TOzbgNS","executionInfo":{"status":"ok","timestamp":1603327039262,"user_tz":300,"elapsed":3500,"user":{"displayName":"Qusai Amer","photoUrl":"https://lh6.googleusercontent.com/-jAP82gBhj-8/AAAAAAAAAAI/AAAAAAAAA9Y/SV0jzmWT_-E/s64/photo.jpg","userId":"00843738786401489735"}},"outputId":"44b45fae-ffde-4375-c887-da96d4ef4e4c","colab":{"base_uri":"https://localhost:8080/","height":204}},"source":["# Load datasets as dataframes\n","\n","dataTrain = pd.read_csv('Q2_Train_Data.csv')\n","dataVal = pd.read_csv('Q2_Validation_Data.csv')\n","dataTest = pd.read_csv('Q2_Test_Data.csv')\n","dataTrain.head(5)"],"execution_count":2,"outputs":[{"output_type":"execute_result","data":{"text/html":["<div>\n","<style scoped>\n","    .dataframe tbody tr th:only-of-type {\n","        vertical-align: middle;\n","    }\n","\n","    .dataframe tbody tr th {\n","        vertical-align: top;\n","    }\n","\n","    .dataframe thead th {\n","        text-align: right;\n","    }\n","</style>\n","<table border=\"1\" class=\"dataframe\">\n","  <thead>\n","    <tr style=\"text-align: right;\">\n","      <th></th>\n","      <th>emotion</th>\n","      <th>pixels</th>\n","    </tr>\n","  </thead>\n","  <tbody>\n","    <tr>\n","      <th>0</th>\n","      <td>0</td>\n","      <td>70 80 82 72 58 58 60 63 54 58 60 48 89 115 121...</td>\n","    </tr>\n","    <tr>\n","      <th>1</th>\n","      <td>0</td>\n","      <td>151 150 147 155 148 133 111 140 170 174 182 15...</td>\n","    </tr>\n","    <tr>\n","      <th>2</th>\n","      <td>2</td>\n","      <td>231 212 156 164 174 138 161 173 182 200 106 38...</td>\n","    </tr>\n","    <tr>\n","      <th>3</th>\n","      <td>4</td>\n","      <td>24 32 36 30 32 23 19 20 30 41 21 22 32 34 21 1...</td>\n","    </tr>\n","    <tr>\n","      <th>4</th>\n","      <td>6</td>\n","      <td>4 0 0 0 0 0 0 0 0 0 0 0 3 15 23 28 48 50 58 84...</td>\n","    </tr>\n","  </tbody>\n","</table>\n","</div>"],"text/plain":["   emotion                                             pixels\n","0        0  70 80 82 72 58 58 60 63 54 58 60 48 89 115 121...\n","1        0  151 150 147 155 148 133 111 140 170 174 182 15...\n","2        2  231 212 156 164 174 138 161 173 182 200 106 38...\n","3        4  24 32 36 30 32 23 19 20 30 41 21 22 32 34 21 1...\n","4        6  4 0 0 0 0 0 0 0 0 0 0 0 3 15 23 28 48 50 58 84..."]},"metadata":{"tags":[]},"execution_count":2}]},{"cell_type":"code","metadata":{"id":"TR6Veb_cRgSB","executionInfo":{"status":"ok","timestamp":1603327043483,"user_tz":300,"elapsed":375,"user":{"displayName":"Qusai Amer","photoUrl":"https://lh6.googleusercontent.com/-jAP82gBhj-8/AAAAAAAAAAI/AAAAAAAAA9Y/SV0jzmWT_-E/s64/photo.jpg","userId":"00843738786401489735"}}},"source":["# Get the data frames of the images(pixels) and labels\n","\n","#Train\n","imgTrain = dataTrain['pixels']\n","labelTrain = dataTrain['emotion']\n","\n","#Validation\n","imgVal = dataVal['pixels']\n","labelVal = dataVal['emotion']\n","\n","#Test\n","imgTest = dataTest['pixels']\n","labelTest = dataTest['emotion']\n"],"execution_count":3,"outputs":[]},{"cell_type":"code","metadata":{"id":"0_V0WrF8o9EE","executionInfo":{"status":"ok","timestamp":1603327045866,"user_tz":300,"elapsed":570,"user":{"displayName":"Qusai Amer","photoUrl":"https://lh6.googleusercontent.com/-jAP82gBhj-8/AAAAAAAAAAI/AAAAAAAAA9Y/SV0jzmWT_-E/s64/photo.jpg","userId":"00843738786401489735"}},"outputId":"1b185ba4-ec00-4457-f717-5ddc9138ba51","colab":{"base_uri":"https://localhost:8080/","height":34}},"source":["imgTrain.shape"],"execution_count":4,"outputs":[{"output_type":"execute_result","data":{"text/plain":["(28709,)"]},"metadata":{"tags":[]},"execution_count":4}]},{"cell_type":"code","metadata":{"id":"yLCHWWJqRgSc","executionInfo":{"status":"ok","timestamp":1603327056731,"user_tz":300,"elapsed":3549,"user":{"displayName":"Qusai Amer","photoUrl":"https://lh6.googleusercontent.com/-jAP82gBhj-8/AAAAAAAAAAI/AAAAAAAAA9Y/SV0jzmWT_-E/s64/photo.jpg","userId":"00843738786401489735"}}},"source":["#Convert the pixels dataframe to an array with a shape of (number of samples,48*48)\n","#Also convert labels into array\n","\n","#Train\n","list1 = []\n","for i in range(0,len(imgTrain)):\n","    y = np.fromstring(imgTrain[i],dtype=int, sep=\" \")\n","    z = np.reshape(y, (48, 48))\n","    list1 += [z]\n","imgs_train = np.array(list1)\n","labels_train = np.array(labelTrain)\n","\n","\n","#Valitation\n","list2 = []\n","for i in range(0,len(imgVal)):\n","    y = np.fromstring(imgVal[i],dtype=int, sep=\" \")\n","    z = np.reshape(y, (48, 48))\n","    list2 += [z]\n","imgs_val = np.array(list2)\n","labels_val = np.array(labelVal)\n","\n","\n","\n","#Test\n","list3 = []\n","for i in range(0,len(imgTest)):\n","    y = np.fromstring(imgTest[i],dtype=int, sep=\" \")\n","    z = np.reshape(y, (48, 48))\n","    list3 += [z]\n","imgs_test = np.array(list3)\n","labels_test = np.array(labelTest)\n","\n","\n","\n","#plt.imshow(imgs_train[11])"],"execution_count":5,"outputs":[]},{"cell_type":"code","metadata":{"id":"jdls0fTXRgSh","executionInfo":{"status":"ok","timestamp":1603327056733,"user_tz":300,"elapsed":2352,"user":{"displayName":"Qusai Amer","photoUrl":"https://lh6.googleusercontent.com/-jAP82gBhj-8/AAAAAAAAAAI/AAAAAAAAA9Y/SV0jzmWT_-E/s64/photo.jpg","userId":"00843738786401489735"}},"outputId":"1718f4d9-2db5-41a6-bfeb-c090f3eb784b","colab":{"base_uri":"https://localhost:8080/","height":34}},"source":["imgs_train.shape"],"execution_count":6,"outputs":[{"output_type":"execute_result","data":{"text/plain":["(28709, 48, 48)"]},"metadata":{"tags":[]},"execution_count":6}]},{"cell_type":"markdown","metadata":{"id":"EqPVjD9BRgSv"},"source":["### (a) Randomly select and visulize 1-2 images per emotion"]},{"cell_type":"code","metadata":{"id":"9QfLzWkuRgSx","executionInfo":{"status":"ok","timestamp":1603327059431,"user_tz":300,"elapsed":504,"user":{"displayName":"Qusai Amer","photoUrl":"https://lh6.googleusercontent.com/-jAP82gBhj-8/AAAAAAAAAAI/AAAAAAAAA9Y/SV0jzmWT_-E/s64/photo.jpg","userId":"00843738786401489735"}}},"source":["# Get index of each emotion\n","\n","Angry = dataTrain.index[dataTrain['emotion'] == 0].tolist()\n","Disgust = dataTrain.index[dataTrain['emotion'] == 1].tolist()\n","Fear = dataTrain.index[dataTrain['emotion'] == 2].tolist()\n","Happy = dataTrain.index[dataTrain['emotion'] == 3].tolist()\n","Sad = dataTrain.index[dataTrain['emotion'] == 4].tolist()\n","Surprise = dataTrain.index[dataTrain['emotion'] == 5].tolist()\n","Neutral = dataTrain.index[dataTrain['emotion'] == 6].tolist()"],"execution_count":7,"outputs":[]},{"cell_type":"code","metadata":{"scrolled":true,"id":"8eURi9HURgS1","executionInfo":{"status":"ok","timestamp":1603332269548,"user_tz":300,"elapsed":551,"user":{"displayName":"Qusai Amer","photoUrl":"https://lh6.googleusercontent.com/-jAP82gBhj-8/AAAAAAAAAAI/AAAAAAAAA9Y/SV0jzmWT_-E/s64/photo.jpg","userId":"00843738786401489735"}},"outputId":"bd970cf9-1fc8-4afa-9989-a9ebb2dab76e","colab":{"base_uri":"https://localhost:8080/","height":267}},"source":["#Angry \n","randAI = np.random.permutation(Angry)\n","plt.imshow(imgs_train[randAI[0]])\n","plt.show()"],"execution_count":199,"outputs":[{"output_type":"display_data","data":{"image/png":"\n","text/plain":["<Figure size 432x288 with 1 Axes>"]},"metadata":{"tags":[],"needs_background":"light"}}]},{"cell_type":"code","metadata":{"scrolled":true,"id":"cVEfaFxURgS6","executionInfo":{"status":"ok","timestamp":1603327065680,"user_tz":300,"elapsed":526,"user":{"displayName":"Qusai Amer","photoUrl":"https://lh6.googleusercontent.com/-jAP82gBhj-8/AAAAAAAAAAI/AAAAAAAAA9Y/SV0jzmWT_-E/s64/photo.jpg","userId":"00843738786401489735"}},"outputId":"9dced0d1-019e-4808-99d7-88c0cbb7e0e1","colab":{"base_uri":"https://localhost:8080/","height":267}},"source":["#Disgust \n","randDI = np.random.permutation(Disgust)\n","\n","plt.imshow(imgs_train[randDI[0]])\n","plt.show()"],"execution_count":9,"outputs":[{"output_type":"display_data","data":{"image/png":"iVBORw0KGgoAAAANSUhEUgAAAPsAAAD6CAYAAABnLjEDAAAABHNCSVQICAgIfAhkiAAAAAlwSFlzAAALEgAACxIB0t1+/AAAADh0RVh0U29mdHdhcmUAbWF0cGxvdGxpYiB2ZXJzaW9uMy4yLjIsIGh0dHA6Ly9tYXRwbG90bGliLm9yZy+WH4yJAAAgAElEQVR4nO2de4xc93Xfv2fu3JnZx+x7l0tyKT4kmnrakkyrUlxXimw3shxYbmCktgNXrgXon7ZwEAe23AJFjbaoDQRx0sRIq8QPBQgi20laGY7jVJZf8UsSJVmWJUp8P5ba5S653NfMzvvXP3Yo8zyWM+Jjd6l7PgBB/i7P/O5v7tzf3D3fPQ8KIcBxnDc+qbVegOM4q4NvdsdJCL7ZHSch+GZ3nITgm91xEoJvdsdJCBe12YnoHiJ6hYgOENFDl2pRjuNceuhCf89ORBGAfQDeDWAcwNMAPhRCeGml12QoFzpS3S0mbufkxndUnGbDRqxtQiQmN967tGlE+lRBHAsZPQ+lG+pYJqqzcZzSNinixyLSc6fQEGNtE4l50qTPFaGujl0IjTaeGXXDphH4tQ7Gh98Qx6rGB1ILqZY26lzBOJd1rC7WbW0XcSxa0vOkS8KoYUyUan1/Uv38+3WpMotKrWjuorR1sE1uA3AghHAIAIjoUQD3AVhxs3ekunF79/vOOylRG7s9m1WHwqYhNi6Ndimbch9/u+my3gClPn6jlHv1eqp5Pl7aUlU2HYNL6tjm/jk23tCxoGx64hIb59MlZZNL8fN1pirKpjcqsvFwWp+rLyqoYxdCoaE/D8lCo0Mfq+fY2PpCKDYybDxZ7lU20xX+AJlayiubxQpfY7mmb/2lSqzPv8BfFyrGt3+V3yP9L2ibgZfLbJwq6y/aRpa/jmp6Y6fnxH0l9svPXvkLvb6z51zxf1qzGcDxc8bjzWOO46xDLubJ3hZE9CCABwEgR/pp6zjO6nAxT/YTALacMx5rHmOEEB4OIewOIezOUE7+t+M4q8TFPNmfBrCTiLZjeZN/EMCHL8mqBKHO/ZtUd6eyqXVx3y47U9Y2ndIn0ueqC/dTinEA0BCCHOW0/5WN9eT9We5HS/8c0D56b6R9fym+dUd6npQQ9mLjzUZCWZLiIABk2hHx2nhkZEjPI9dUDfp27Erxz7HaMHxt4dfXxHUGgLQQQ6UPDwBkiKHlEvfja0utt0xxVOs8uRm+xtwZ/XlUu/jNli7qa5ZekIJh+wL7BW/2EEKNiP49gH8EEAH4UgjhxQudz3Gcy8tF+ewhhG8B+NYlWovjOJcRj6BznIRw2dX4S0KKfyeFSH9HUY37ZFTRPhEJ/6YRa9+qkhfHjK9D4SIizulzdWb1776lH51JGa8TvzMfSC/qBQhiwx+Wv4u3fOZ8ivv6OdOv1n58XQSf5IJ+HyXpf5O+Hp3CHy819O+5J2v89+q9ae2PLwqhxQqqaQcrqCaT5dexltFbJjojArqMIKuFLfxGiozf15MItFka0ueKF/nNFy1ovWYl/MnuOAnBN7vjJATf7I6TEHyzO05CWF2BjtpIdJGZPwCkRiSFDABIVYS41EZCTbnHyMQS4puhGaHax8/Vk9WJMPmMDurpirhINRRr8U0GyEgRCwB6hI3MgrOw5pGCnCXGVYO+Rp3idTIzDQBkklfOCOqR624Y2YyDQqBs1LRNdyQCb2ItfsUpEZhlBNBYAt1Slt8A1Q69ZWoFfr5YBr5AB2sVRrWNuh2MW1hmc0btJI418Se74yQE3+yOkxB8sztOQrhCgmpE9ZgenQhDRe63hU6d6FDp5t9t0o8CgHqO+3KVfu3HUgf3PzNpHYwiq9IAQFda+80SGSAjg2OWbfj5YyNZpQruR+ZIzyN99rrhJNpVcMQ8xvlTMoHFeq60kcMh35ulPcQiOMnyvdMkfXb9uQ7ltIZSrvMtsrikb5pqF587nNHvNV3ma6pn9RqjskiwMqSYek7oA+6zO44j8c3uOAnBN7vjJATf7I6TEK4MgU4EW1BBZ/pQiQes1Ad0vbtqJxczal1a3KhnuUgSOrX4JDWRyCgJ3W2IcR1R66qwfaIq7GCkRaMukUFmCWun67ziasYIvJEaUcNQzKrGMVnNuGBUmJFVcGLj/CVIsUkH3sw3eCkzKzNOZu/NRVrAXaqKbDGzRLc+1pvhlYKmY31fVUQmXD2r19i5yOeODK02syijxwzBtMptgrAxtMlfvXbl/3Ic542Eb3bHSQi+2R0nIVwZPrvkzJw6JL0tq5pNIy18dqOydYhEYENstGiSNpb/ZxyTATNmhRkR/GLZSKxOKtL3t9ZTFYeMwj0mJSM5RiKTaqyEmqoo3WtVl5WtpayKO7J2jaWFLKW4H2355xZVkXjS16H1Iun/zw4Z7adOcM2g66R+H1FJXLN862o2r+dx7U92x0kIvtkdJyH4ZnechOCb3XESwuoKdAGQ/eBV5Rqzb7UQyazIgSoPyAhGxRvRIVhVpQF0u6fI6LOezQkRzQiqma9q9W+pLqqepLUAUwrcZqGh55FBNVYGlxT6ikYwSkNc+7yRYWcF7GTE+ayAnZK4kNY8Uny02jrX2xADpbAn22MBOsgp3dA2C4ZiO1vhATrdRgUiSalHX+tyH7/Z+vfp80clkZnXohc7gLYqMr02X9uWjuNc0fhmd5yE4JvdcRLC6gfVSF8pEn6r4WvrOQxfRsxjVaCtifwIGUBjHYszRlVU4aOXavoyVuraH5dBJBaytZLls9aFnzac0m2dZdBIlGrt/xnFU1BtoyWwrFwDAHXhx1sJLPJ6WFVoKirwpvV1bcfPl/oJACzWtIgj22pbWkwsqhI1GvqCVEe4TbXbqGazxO+1esZocyb9+NfRstmf7I6TEHyzO05C8M3uOAnBN7vjJITVF+hSl+D7Ja2XHUoiG8kQLmTCVN0Kqknz19WqWhBKCbGrbggyVpbZkjihFWjSDrIKjJVRJgNkrHPJeawmUpb4Js/WuvmU3VoKEIJUG9fDygLsFRl+xUafspE92xvGNSsaAp0sS52LdOCRtMkYom5F3FdLA/q+6nyVXyOr3HRmQVxHtZ9Wvob+ZHechOCb3XESQsvNTkRfIqIpIvrlOccGiOhxItrf/Lv/8i7TcZyLpR2f/SsA/hTAX55z7CEAT4QQPktEDzXHn2o5Uzstm9shGP6fkdggScmuzlY8Qhs/68igGitgJW0kx0iqjdaVWaykDkkh6ACRlNAs2qnuarVx6jQuUlH4qAtGwIxsLSX1AQCqv1HVnIf7yDOiai6gK/VYlWqyQsOwgnMqxuchg5PSRgXcqgigsioXQSRUNWJj64mXycpKAEAVPk+qwAOR6Dz7oOWtHUL4IYAZcfg+AI80//0IgPe3msdxnLXlQn32DSGEiea/JwFsuETrcRznMnHRv3oLIQQyf25ZhogeBPAgAORIF9h3HGd1uNAn+0ki2ggAzb+nVjIMITwcQtgdQtidSRnlXB3HWRUu9Mn+DQD3A/hs8+/HLnQBunKNkRkmM+GsTJ+6qPJRsUr18rFZpTnbunSzFN86Yx1oIfuBA0BPmmenyb7igG5lNJgqKBsZfJIzRCMpiMnqMgCQayMcxsrTmxElf2SLJgDYFs+ycWwIdO2UpJYCZTultS1+OrODjQ+fGVQ2c3O6bdTVm6fZuDvWmXmy/VejYbwvkU1pJUA2svxgZqH1e536Nf4+qidX3tLt/OrtrwH8FMAuIhonogewvMnfTUT7AbyrOXYcZx3T8skeQvjQCv/1zku8FsdxLiMeQec4CWHdtX8KFR0QEcoicCCbbTkPlbQfmy6IBBZrmhr//gtGJdua8Mmqho+Wi4wKN+KXFlbwhwz2sCrHVkQQjRUgIhNPrCSTrFiPDJYBgJKR5HOkOsTGstUUAOTE3KXz9RI+D7LibN6oyvNMcTsb/3DqGmVz9OVRNu570WiZZSzx2OYxNj6yQ59/16aTbCwr1wBAnOP3Q61T33yyHfP8Vm1T+hg//0M3fp2NP/OTM+o1r82/4v84jvOGwje74yQE3+yOkxB8sztOQlh7gU5k6aRGhpTJ3K1cXOnZq0WI+kv72Diqa5FEal0yCw4AGkv8+68WGZlpov2TFVRjVaoZihfZWGZ0AcBpkdWVr2tBSLZ/erk6omxuzR1jY9mOCQAiUSnGykzrNDL6pGhovY+cyG6cbVitrvixQtCVYn68sJONv//qTmVz5pUBNs4f1M+wLcf5e01V9JpP3GmUu+7jNwnNaNHsRFcvG3dltfBaqvC5S0NaeJUty87cpG/Q//PWL7LxkRoPqjlflqQ/2R0nIfhmd5yE4JvdcRKCb3bHSQirLNCR6skWijz6avy+zepVtXfMsfGrk7rk3a7/fS0/UNICTK2DCyDpRWWCqMTXV6nrsKql+TwbH0zpUkkHjYixZ0U01rZBWQBIZ1VN5XuUjYy8szLB+kRGnRTMAGCyzj9+WRIZAPJpowyT6IceG1l3FZGZaM39o8IuNt4zt1XZ/PQFLshtekLPs3Mfvz9mb+hVNhN38M/1mjvGlc1HBw+qY3N1HsH3/Bl9fy5WuGjXFWuBbiHmNqV+fc2Ko1yg7Nk0r2xkCbKBiN/ELtA5juOb3XGSgm92x0kIq+uzh6Cy2qIt3Aeav0H72pjjflM8UFImp2/lfvzgHh14kxK9raOS9v9ikRnXdVzbdJ1sXUGkOKK/R1N7uK9/siOvbA5excdPb9qubLr7uc4x2KWzzooN7v9dl3tV2WyJT7OxVaY5S/o6Ttf4up9e1Gs8VeZzPXNii7JJPcfn6TipA3hGi/xYpVt/Hgc/yNs9Za+dUzabxDUqVnUAz9HSgDo2muV+8+6BY8pG9no/WtTzzKR5FZxUxrqHRJ95I5tS6iW3ZHklo0732R3H8c3uOAnBN7vjJATf7I6TEFZVoAuhoUpMVUe5uPKmHROQHDzJM+GqczrzSLbpCrHOshKVnFE1ela0lRmX4SJR56s6My0q6QyqqMQni6cWlM2GiH//Fq7WAUSLm3jQyHxKB5F85RqeKTh6oy7t/8mrv83G0zUrgEeXTr5ZZNSdqmqh8bGXbmbj3ue1IJabEdlzs/piy35nC1fpWzbDq1aj/qzuzz4V+LFKr5Hht1sHw2zKcrGvP9afWRSL3usN/V7nKlxkLpb1/VEc4TaFOV2iWwYwnRLZnTWrzHoTf7I7TkLwze44CcE3u+MkhDVPhImK3E+qGSWPg0hG6d6gM1iq3cJPM77GZOlow9XE4g7htBsxCqmy6KFe0c4/1Yze2sKdSpV1uyFRzAbxovbB5DzVLn2udIEfO3FEVwD6k5j3+bh14LiyscpES2RQCQCMbubBOJUNWkOZKXCfNBzV17GXFyBSLbwAYGEn91u/9J4/Vzb/9vsf4+t7Qt/6+xs6ESd9O78BPrBhj7LpEYs6WdXaRz7mN1su06FsRBwSIqMV2cEKr0r0oqjuM98wsrua+JPdcRKCb3bHSQi+2R0nIfhmd5yEsKoCHRGBMlxQoBM82OPwpEj7AtAocAGoHBu9tITeUenXAQn1mItW1W4tfnWP8SynpaIRwHOSz51/WQtknaeMnullkcHVo0WrhTH+/Vv/V7qaTWeGZwZu69IVTWQP+acPafHpwNENbPyeDS8qm23xKXVsum4om4LtPXzdQ1ktHH17//VsvOEtJ5XNVIOvMdZvFVt3TbLxvsqoshke5cExp2/UgmXHrll1bFeeryljVAWS1WJ601rU7EzzzywX6/tjMc/vj2xWZ4De181F1L+c4xWagiFwn8Wf7I6TEHyzO05C8M3uOAlhdYNqUgTKcP+7fopXS+n9wZvUy+bu5EEL6bSOdMnNcH/HKtghinyg3qP9pqv6uN92HDqponqaB8P0HdKRHtNv1pqBzI/omNaaQeEWnlTz5Ru/qmz+4Pg9bPzsQe2PX72FayFkfK2n5vkFkZVUASBn+KjzDf7epiu6ws18ldt0RNr/vHEzr54zvqCvdepq7g+T8dlL/uD5d6ljsrju9W8/pGx+a8Mz6tjmmAcHyUoxALAgrodV7VditQyTHbpKx7Q20nsH/4xkolLKaOH1q/9zHCcR+GZ3nITgm91xEkLLzU5EW4joe0T0EhG9SEQfbx4fIKLHiWh/829dZcFxnHVDOwJdDcAnQgjPElEewDNE9DiAjwJ4IoTwWSJ6CMBDAD513pkCAFFZI5Xj4sbo/zuhXjb7Dt6DeqBbBy0sdPBMo0ZsZM8JAYSyWuzJiLZJu4Z0hZfpO/n5D45tUDaduuIw6jkunpR0XAcGB7gg9T9PaLFpQ45XS7nt1h8rm78/cQMb03FDMOzg6xlf0t/XP8voMtFSkDq+qF/XIYJIxgtafLuqm4tfO/PTyiaX4vPI1lcAUA/8mTU0pqvJZESFl5SRzjiS1q9T5zKCVhaEsFmU6ZXQ7a/KNb31pK6XLupzTdT4/fGDWS5oL9T3qtecpeWTPYQwEUJ4tvnvBQB7AWwGcB+AR5pmjwB4f6u5HMdZO17Xr96IaBuAWwA8CWBDCOFswbhJAPrxtvyaBwE8CAC5lFH0zXGcVaFtgY6IugH8LYDfDSGwCOUQQgDsX/CFEB4OIewOIezOkP49ruM4q0NbT3YiirG80f8qhPB3zcMniWhjCGGCiDYC0M6tIgANEfyS4/5NY1JPk9nPWx3P53UQS03EdYTUygkB56NQ5euRfiUAbOrgSRVWi95XevQPOiSSU7YN67l39nC/dSAuKJu8qIzy7cnrlc3JKV5xNrK+1lMrB2CcpdjQ/qcMGpH+OQAs1Xjw1O5BLWIcNzQCyT39L7Dxzoy+P7qEPz5rVHeVOoPle0vfH7CDaCTzDf4Qq0pxyMBqYV0XGkpuu9YQ/utJruEcnOPCT7m+8nrbUeMJwBcB7A0h/OE5//UNAPc3/30/gMdazeU4ztrRzpP97QA+AuAFIvp589h/BPBZAF8jogcAHAXw25dniY7jXApabvYQwo+AFZNk37nCccdx1hkeQec4CWGVS0kbNFqLRJHoQFQ0qsfkRAJbVNZBE7Isc2joH1jmK3zulJE+JwM7tnXpajIbr9YlVaQoY1VvGRLthXKkM/N+MLOTjedL+nqMjXLxb2JSV2+RX/WFuha2ZJ93QAtQ1/VMKpv9i7zk8XxNB/W8o3//eecFgL2lTWw8W9flt68Wop3VsqoUuGBYMc7VaOPZJ9svAUCXOF/D+EG40uDns4Jq5JKs9k83X8eFznv6fsHGv581Svk08Se74yQE3+yOkxB8sztOQlh7n70Nyv3c1940OKdsZqvcl7MSYWSL4OiMfvu1Ee441Rratxsvifa/sl80gLRVKkdQqGlfuyzm2jc/omxyourLB7frCivfOXkdG4e0oY20XqLpR8tjdeOZIf34iZJuiVRucD/61o4jykZWxdlb2qxsJqr88+iNdAtt6cdba+5JtX5dF+kAqpxM+kkNKBtJra7PnyrzezaSQhSA23KH+WtELzCZ8MNsW67KcZw3BL7ZHSch+GZ3nITgm91xEsLqCnQBWM6G/RUk0rFCXatGongMJk73KpvGGH9dZk73DO85xoWUdEHbpCOe0WUFmlTqXKDqz2hhZ65qVIYRQTUzRn/2eoNfj01dWozc2cmDSKzSxTITzeoXnxJBRecrQ3wuk2UutllloqVI1sjq88uAndN1XZJ6OM2DRG7s0D3kZaUYmYUGADN1XkthuI2qNAAQCaHVCtiRgT69Rk/7XMRv4nJVb72oxK/RlhEdrBWL9UyL92Vl7p3Fn+yOkxB8sztOQvDN7jgJwTe74ySE1RXoaLlHOz8mBTotNuV50BDqN+myVAsjfN7SSS3S9L/C56aaFt+CUS5IMtrBxZ268ZpMSr8PGe0ke6gDuuTV5qwuXSXFJUuUkVlW8YKRidXL19OVbl2mGdBRhQtGlGG/6FG+Laf7vMs+ankjgi0SYX450mJgFPH3YQmWMjPNigzMG5F3VsScpBh4JKQsgQXYZahasSOvr9nPlnhpb5nNt/RaDViNP9kdJyH4ZnechOCb3XESwtoH1Rg+uqTvEPe3RoZOKpsDaV5SdyGjffYQiawiHR+hyKe1kQw+kZlqgB1oIiuYbO6YVTYyGMUK/rg2w/2ygUhrGH86fxcbx0YMydJVPNCjJ234zEb2ntQezlT0tX6hyivMyKASAHjf0HNsvCvWAURF5evqNS6I7Dkr8OVQhWcPlho6oCpG6170VqUaWfWmYegcaaHhEOkAJtHpCieKumXW7SNcwJI+vPdndxzHN7vjJAXf7I6TEHyzO05CWPOyVFKwi7p1p9fUU6+w8ZNP3aRsenZwsauR1UIFiXNJQQQAFpZ4gMQLpzcqm5sGuUBWNQSZUyWdwXXnEC+dfLykyxddneMZbbfmdI+0raLE1J/MvFXZlPfwuSOtRyE/wktZW6KiJWRNLPGst0JVBycVKvzY7LzO8Htxmpe3/tg1P1U27+jcx8adMgUSwIAo7V2t64CZk1WeKfkb3b9UNvuqugRYJASvgxVtI/vBWUE9MhCpWtVrjIUWWvqMvvd++/ZPsHH+uMiCmziiXnMWf7I7TkLwze44CcE3u+MkhDX32dEQjkpk9LYWgTe7vqCDal7+D7wfehjUfpPs2S7bQQFARZT4zUR6Hhl8sjmrg2NeIF3yeHfnITaWbaQA4M1ZXoll1Dj/F2ZuZeMvf/cuZZMVl3Vpow6O2drNe79vz04rG5loAQD/uMjLVG/tNdpfdfIKM6dzWos5U+LBOE+culbZ7Nr8Kl9PTa/n5qzu2S4Zy/A1TtZ1aWtLn5CtpZ5e2qFsbsrxz+xbs29RNjWh6zQaRilpIUdkxvV9te3L/DNDzNecXlw5ccef7I6TEHyzO05C8M3uOAnBN7vjJIS1F+gEMsgGACjHA13CuK7Gcd3/4JVRalfp4If0KZ76ldqmgxbKszzL6bjRI/vDW55i4/GKDo6pGtVbhiMurlgZVJ0i0ue7xTFlc7A4zMahX4sylREuyNWX9Ed9Uz8Xv+7tOqBsnq8MqmP3bnmRjW/oGFc2P1ngPeT7jHLb+QGerbdU1wJZTlyPQSoom5fEGq3e6zdlT7DxfiM4RopxAHCi1s/GO7O6F/3xKj//0aK+H8Y6udh2rK9f2ZSWdOCRpDHEXycDxTDlpaQdJ/H4ZnechNBysxNRjoieIqLniehFIvpM8/h2InqSiA4Q0VeJSAdIO46zbmjHZy8DuDuEsEhEMYAfEdE/APg9AJ8PITxKRP8LwAMA/ux1ryDFv29U9VkAaIjqNjnd1zwUuU9Iz72ibfp4MkRU0fpA5iS/JGGn9hFnajzJ5Zdzm5TNRzf9WB17emkbG1tVaLrO01/7LHf372Xjf8pcrWzSMQ/GaaR1cM478jzJZNYI9LCqub635+ds/OdTdymbY4vct7x96LCykbrGlpwOzpmu8eCXolGFRraNsqrUbom4hvGCESw0kNIVf14WraVG07qazj8s8CCaf9av3+u+Ak/6sarNpmqyipMOhEK19f2xEi2f7GGZs+lRcfNPAHA3gL9pHn8EwPsveBWO41x22vLZiSgiop8DmALwOICDAGZDCGe/ZsYB6PhQx3HWDW1t9hBCPYRwM4AxALcB0EHMK0BEDxLRHiLaUwn6xyTHcVaH16XGhxBmAXwPwB0A+ojorIM7BuDECq95OISwO4SwO0P6d9aO46wOLQU6IhoGUA0hzBJRB4B3A/gcljf9BwA8CuB+AI9dzoUyGka5XJHRlurRlWLQ4CJVdk4LIFGFX5KRgXll83+Pv5mNrx3QWXiWsCWrpbyt44iyOVLjNlZZ5K9N38bGW4Z1i6j5Ev9inS/oL9rP7f8NNv7Y9p8omx+eeZM6trv3KBsfWdRBJDf380CbjbHO4Dpc5sFBmwybJ+auZ+N/0aOFVznPv8y/oGyO1rgYOBzpz/W4uPYA0Cd6rU8aNilRbntnVt8PT0zxH4ZLRn/20C1Eu4pRSikrhEUp4q1cSbotNX4jgEeIKMLyTwJfCyF8k4heAvAoEf03AM8B+GIbczmOs0a03OwhhF8AuMU4fgjL/rvjOFcAHkHnOAlh9RNhZGWa1CX6vpF+vNFeB4GfO140Wvn08fXMl3QAz2KRH9s+dlrZWBVetmZ5C94+o1LqtIh9+aeFXcpGto2KjfbQZ2KeVGFVd5VVciequt3QrNHaaYeoDPORzdr/PVbh7bi2ZPQ1Gkjz6rb7SjoxKZ/mv8HZEut5DpV5Ukveauss7odR0gFNVqBLjwi0qUPbyGCg2bq+1m/p5/q11Rp8dlJc/8jYG5Ze1Sb+ZHechOCb3XESgm92x0kIvtkdJyGsvkAnBbl2SklfIoLIGKKaDqrJzPL1nZnQJYe7R3gm3CuLG5TNVYYgdYOollI1tJY9RV6qeKKkgzhOLuXZeHZJi2hpUYL6lquOaxsh7I3EWmj75FXfVsdkYEnDeGbIstSlhs6Anq3z8tJVo8KMbIc1WdMiYlHMXTXWk0HrbLH5oMVYKbbJqjSAbhF1tDykbKbK/DM7PK0DkUbnhdBqZYBKpM15XuJPdsdJCL7ZHSch+GZ3nIRwZVSXbcd3SbVjw7/b4pmiNqmKgAgj+KFc5pdttqx95jkjsOJ0g/uoVuDNiTL3Sa2AmUgkXgx3LSobWc1V+ufL8/BrfaamWzR9p3KDOiarwGaN4KChmK9JJotYWJpBl0gE6ot05aDbug6y8aGq9pl3xlxDsNpsN4xj1mekbETbqHJDb6u0eP/BqAqUnRXBQO3c91LzMvbPWfzJ7jgJwTe74yQE3+yOkxB8sztOQlj7rLfLRdDnkUIfzeiywCmRrWVlz9VF1ROrZ/iRkg6+kFles6RFMyl2jXTqnukdERdyrEoxM2UuEHbHuuJNSQhtizUd+JI1hL2OSLSbMj7SvQWewTZd0pWDKqKUdDqlJ+rLcBH146PfUTZ5kZlmBb4sGEE9aj1GUI8M/ImMNyuDgVLGPVMW77V+SgfwxNO84lCwst7OI8C1wp/sjpMQfLM7TkLwze44CWH1fXbpc0g/up1AAot2KnjE/O02CjqopnOK+2QLRoX80OBrnJrX/uhkp06gORpzPSAf6Tr6/Wm+pjEjoeZHp3i7p33jOhEn1EaFtYAAAAw4SURBVPkas126rXNfNw+86cpom2JV6xEyGCeb1kE1srqtFfgzI1oUT8/klY1sY/VwdKeyeWD4h2w8GOlzSaxgGatyrBVoJLESeCSLVe6jd0zq19AS11XcZ3cc54Lwze44CcE3u+MkBN/sjpMQ3jhZbxdCVZcc7jnERatTt+iMttDBBalSQQdsHJ7VgR1DWZGxZcR5bBdlmmX7IQAYn+WZcakpPREJEZGO6iCOxtu4QGhl2F3br1tLlev8ttmY08FJo1l+zMoo+9JLd7Bxz0+N7MFr+Zr2DYwomyN9XPi8OtaBSBJLoCs29DWqi3XLjEMA6BWi6mRZC337Tol1W5XOO7moSUUt4JqiXZv4k91xEoJvdsdJCL7ZHSch+GZ3nISw7gS6y4qMsou1SBMf5xFrHZNXKZvFASHaZLWwdeqkjqA71MlFu63DOjoul+Ki4XRNz7Oxl5dvOpjREXzZU3yNjaxWhE4d5tly0zktLB3t1Rl19VrrZ0R1iV9bWjKizMSSZt+iBdMdO3iv84+M/UzZSGEtNkS0kohys3q2zdT0dTxd5RF0/bEWTOVddLSor1nxBJ8706E/j0YnF1qjRX0upMV1fB0Rdf5kd5yE4JvdcRKCb3bHSQhXhM8uA20uOMimzn1rSuu335jmPdQHX9I9w0tD3LcKW5aUjeWjHj3NfbnSoNYMpN+40Mgpmx15vsYDGb3G8iD3W6NhHaAhK8Pku7RNJq31iFKFr7tmlEUe6ef9zy3PcknMk4119ty/3ryHjW/O6jZWU3V+zaxS0gMiE+50vbV/DgAz4thiXQfeLFT5Z3R4Vvvs8Ty/RuUN+r1W88Jnn7zwDDcLf7I7TkLwze44CaHtzU5EERE9R0TfbI63E9GTRHSAiL5KRK0r+jmOs2a8nif7xwHsPWf8OQCfDyFcA+AMgAcu5cIcx7m0tCXQEdEYgPcC+O8Afo+WFbK7AXy4afIIgP8C4M/OO1EIupR0q37tho2VGWesuaWNFOwAqP7wXc+/qkw6d25l4/leI+vMOH1phgs5z89tVjY7hUgTG+Wmt+Zm2HjztlPK5sRRHsBTr2jBcGiYZ+Fd06fnaYd8rIU9meX20hldOqsnx8swvWv0ZWVzbZZf/4rxfKqCvzerJLQMTlqo6ww7KcYBQEpIi4WaFugWxbGZcd1Dnnr5fd01rANmQlqs6SJKUFm0+2T/IwCfxK8qhA8CmA0hnJUUxwHoO9dxnHVDy81ORL8JYCqE8MyFnICIHiSiPUS0pwLdqMBxnNWhnR/j3w7gfUR0L4AcgB4Afwygj4jSzaf7GIAT1otDCA8DeBgAelODl/bnEsdx2qblZg8hfBrApwGAiO4C8PshhN8hoq8D+ACARwHcD+Cxy7jOVYNkuelTOlllZM8wGy+Nav+v2qt97fQZPvfLU9qPrYje3j2GP7yzm1ezeefGV5TNz+LtbHxiTie5LC5xX3N/GFY2GaNMtKRS07dRrc5/aNzcq6vZvLX/GBtfl9P6iCzTbCUGzdZ5SWqrCs1EhfvRVnCMbKsFAKfK3I+fK+vP+vAU10fS81oz6L6WV/whq61YVvygbfnsMsCsnRLqTS7m9+yfwrJYdwDLPvwXL2Iux3EuM68rXDaE8H0A32/++xCA2y79khzHuRx4BJ3jJATf7I6TEFY3641IB9GsN4TgQR1akEk/f5CNRzZcr2wm79DvU1ZqLk3oII4jKX7+awZ1oMvpCs/Y2iKCbADg9qHD/NxDWsg5U+PC1qtLWsR7WZZABtCV5T3hNubnlc2be/kvZ96Um1A2g6JffWTkxsn+6FY/NhnAUwr6tpZC35FFXeo7bZTSnqvwz398RgfMNF7lNuntutfczkFe3nqyoIXGUp8I6KppcZRkn3kp4p1Hr1vnO89xnEuFb3bHSQi+2R0nIayuz95OIswlO9UlaiMVjMQckUCTP6B91sJovz62ma8pZ/ToLsTcRz2R0YEemYj7cpav2R3x0OSNGe3Xy1ZTMW1RNtds1a2URjL8/VrJOrJt1Wh6VtnI11lVeWSATFH6rAAW6/x10xXd5328yH3t+bI+VyPo++P0ogjYmdGvQxe/R3596yFl0hFxnaNY0+9jvL+N+1P56F5d1nEcgW92x0kIvtkdJyH4ZnechHBFlJK+VFyyktRCZAyGyJiqaeEkf5SPl3TFY2ROc9FupksH3siMMuj4EIzmuIg2Dl3euCwy7OQYAN7Wo8WmkYiXiS4ELTYVREsmKxNNHrOCakoNblM11iiryRwrGOJola9xekFf12AIdJUKPx8Zra9uvJF/sNd16QCiOVEZpzNdUTaGrqhpKdCtLNj5k91xEoJvdsdJCL7ZHSchXBk+u1VxVtJGcM4F+ehkzCvOFc3qxIeFrTrRoXOCn7/3sH5fi2N87vqkDuJYEEua7tStjCRLsfare9K8bdX1nbpSTE9KV8pJiZbIXdD+52CaV6493dA+cl0ksBi1fhGJc22IdcWbpxZaV+UpV/mtXqvqgKZ0rFdQL3DNoHvTgrL5rQ3PsnEKRstooT3k07oeY7VH+NtWFRrpo69SpRrHca4gfLM7TkLwze44CcE3u+MkhLUX6KT4Fmnh5FJxQUE1Rtab7Oseiro/e3pJz138NS5ahSe1aJU/xs+Xqurv44UsF9tmu3U1na6Yi2Zp0u8jFtly9Ta/+2eM3uaSnTHPlqugdUum41Ud+COr0MiKMwDw/CnejGh2QoujUQ+/Hl2dWiArFLQYmu7iWYf/ZueTykb2frcCiDpFFmLKKCVdG+FrpO5OZSPvNYrFubxSjeM4vtkdJyH4ZnechLD2PvsbgYquJhPr2AuksrzCTPbdugpM4XHegqlrwtAM6txvnc1r37+vk/t2wzkd+JNJ8fVI/xgApmo6O6MhnhGdKe3/Hqzy7JyMUc1GVqYpGi2ZXi7wFlknCrq669QB0X5pSK+nr4dXzimUdJBRKqWv9Z07DrDxrqxOcsmR/vxb2cjKNQDQP8g/o6lf36Rshv+eVzbWbcc9EcZxEo9vdsdJCL7ZHSch+GZ3nIRAVsnly3YyomkARwEMAdB9jdY3V+KagStz3b7mC2drCGHY+o9V3eyvnZRoTwhh96qf+CK4EtcMXJnr9jVfHvzHeMdJCL7ZHSchrNVmf3iNznsxXIlrBq7MdfuaLwNr4rM7jrP6+I/xjpMQVn2zE9E9RPQKER0goodW+/ztQERfIqIpIvrlOccGiOhxItrf/Ft3IlhDiGgLEX2PiF4ioheJ6OPN4+t23USUI6KniOj55po/0zy+nYiebN4jXyUiHci+xhBRRETPEdE3m+N1v+ZV3exEFAH4AoD3ALgewIeI6PrVXEObfAXAPeLYQwCeCCHsBPBEc7yeqAH4RAjhegC3A/h3zWu7ntddBnB3COEtAG4GcA8R3Q7gcwA+H0K4BsAZAA+s4RpX4uMA9p4zXvdrXu0n+20ADoQQDoUQKgAeBXDfKq+hJSGEHwKQDc3vA/BI89+PAHj/qi6qBSGEiRDCs81/L2D5RtyMdbzusMzZVK+4+ScAuBvA3zSPr6s1AwARjQF4L4C/aI4J63zNwOpv9s0Ajp8zHm8euxLYEEI4m984CWDD+YzXEiLaBuAWAE9ina+7+ePwzwFMAXgcwEEAsyGEs/m36/Ee+SMAnwReKxA/iPW/ZhfoLoSw/CuMdflrDCLqBvC3AH43hMC6O67HdYcQ6iGEmwGMYfknv2vXeEnnhYh+E8BUCOGZtV7L62W1i1ecALDlnPFY89iVwEki2hhCmCCijVh+Eq0riCjG8kb/qxDC3zUPr/t1A0AIYZaIvgfgDgB9RJRuPinX2z3ydgDvI6J7AeQA9AD4Y6zvNQNY/Sf70wB2NpXLDIAPAvjGKq/hQvkGgPub/74fwGNruBZF02/8IoC9IYQ/POe/1u26iWiYiPqa/+4A8G4saw3fA/CBptm6WnMI4dMhhLEQwjYs37/fDSH8Dtbxml8jhLCqfwDcC2Afln2z/7Ta529zjX8NYAJAFcv+1wNY9sueALAfwHcADKz1OsWa/zmWf0T/BYCfN//cu57XDeDNAJ5rrvmXAP5z8/gOAE8BOADg6wCya73WFdZ/F4BvXilr9gg6x0kILtA5TkLwze44CcE3u+MkBN/sjpMQfLM7TkLwze44CcE3u+MkBN/sjpMQ/j9dHLEjlcp7eAAAAABJRU5ErkJggg==\n","text/plain":["<Figure size 432x288 with 1 Axes>"]},"metadata":{"tags":[],"needs_background":"light"}}]},{"cell_type":"code","metadata":{"id":"Bhmf3HWGRgS-","executionInfo":{"status":"ok","timestamp":1603163816610,"user_tz":300,"elapsed":447,"user":{"displayName":"Qusai Amer","photoUrl":"https://lh6.googleusercontent.com/-jAP82gBhj-8/AAAAAAAAAAI/AAAAAAAAA9Y/SV0jzmWT_-E/s64/photo.jpg","userId":"00843738786401489735"}},"outputId":"f4a27811-f3a1-4e1f-d49d-53540ac50684","colab":{"base_uri":"https://localhost:8080/","height":267}},"source":["# Fear \n","randFI = np.random.permutation(Fear)\n","\n","plt.imshow(imgs_train[randFI[0]])\n","plt.show()"],"execution_count":null,"outputs":[{"output_type":"display_data","data":{"image/png":"\n","text/plain":["<Figure size 432x288 with 1 Axes>"]},"metadata":{"tags":[],"needs_background":"light"}}]},{"cell_type":"code","metadata":{"id":"uY8UWXrcRgTD","executionInfo":{"status":"ok","timestamp":1603072634681,"user_tz":300,"elapsed":643,"user":{"displayName":"Qusai Amer","photoUrl":"https://lh6.googleusercontent.com/-jAP82gBhj-8/AAAAAAAAAAI/AAAAAAAAA9Y/SV0jzmWT_-E/s64/photo.jpg","userId":"00843738786401489735"}},"outputId":"b3a117e1-d655-4514-9572-eccc9ff53dac","colab":{"base_uri":"https://localhost:8080/","height":267}},"source":["# Happy\n","randHI = np.random.permutation(Happy)\n","\n","plt.imshow(imgs_train[randHI[0]])\n","plt.show()"],"execution_count":null,"outputs":[{"output_type":"display_data","data":{"image/png":"\n","text/plain":["<Figure size 432x288 with 1 Axes>"]},"metadata":{"tags":[],"needs_background":"light"}}]},{"cell_type":"code","metadata":{"id":"myxSlnuMRgTJ","executionInfo":{"status":"ok","timestamp":1603072630370,"user_tz":300,"elapsed":615,"user":{"displayName":"Qusai Amer","photoUrl":"https://lh6.googleusercontent.com/-jAP82gBhj-8/AAAAAAAAAAI/AAAAAAAAA9Y/SV0jzmWT_-E/s64/photo.jpg","userId":"00843738786401489735"}},"outputId":"a6b32c5a-3992-4931-be44-699cf61a4856","colab":{"base_uri":"https://localhost:8080/","height":267}},"source":["# Sad\n","randSI = np.random.permutation(Sad)\n","\n","plt.imshow(imgs_train[randSI[0]])\n","plt.show()"],"execution_count":null,"outputs":[{"output_type":"display_data","data":{"image/png":"\n","text/plain":["<Figure size 432x288 with 1 Axes>"]},"metadata":{"tags":[],"needs_background":"light"}}]},{"cell_type":"code","metadata":{"id":"FBI65QhKRgTO","outputId":"ad3a1545-0b59-415b-fc3c-ad2418c1b494"},"source":["# Surprise\n","randPI = np.random.permutation(Surprise)\n","\n","plt.imshow(imgs_train[randPI[0]])\n","plt.show()"],"execution_count":null,"outputs":[{"output_type":"display_data","data":{"image/png":"\n","text/plain":["<Figure size 432x288 with 1 Axes>"]},"metadata":{"tags":[],"needs_background":"light"}}]},{"cell_type":"code","metadata":{"id":"cYyJzdz-RgTj","outputId":"d24721e7-6e29-4811-d5b7-c53689dc73fc"},"source":["# Neutral\n","randNI = np.random.permutation(Neutral)\n","plt.imshow(imgs_train[randNI[0]])\n","plt.show()"],"execution_count":null,"outputs":[{"output_type":"display_data","data":{"image/png":"\n","text/plain":["<Figure size 432x288 with 1 Axes>"]},"metadata":{"tags":[],"needs_background":"light"}}]},{"cell_type":"markdown","metadata":{"id":"V9rNEgAaRgTm"},"source":["**(b) Data exploration: Count the number of samples per emotion in the training data**"]},{"cell_type":"code","metadata":{"id":"5nf9ZyPuRgTn","executionInfo":{"status":"ok","timestamp":1603327075399,"user_tz":300,"elapsed":457,"user":{"displayName":"Qusai Amer","photoUrl":"https://lh6.googleusercontent.com/-jAP82gBhj-8/AAAAAAAAAAI/AAAAAAAAA9Y/SV0jzmWT_-E/s64/photo.jpg","userId":"00843738786401489735"}},"outputId":"3df5103f-9229-48ea-bb37-10a43090bc5b","colab":{"base_uri":"https://localhost:8080/","height":136}},"source":["print(f\"There are {len(Angry)} samples in the Angry expression\")\n","print(f\"There are {len(Disgust)} samples in the Disgust expression\")\n","print(f\"There are {len(Fear)} samples in the Fear expression\")\n","print(f\"There are {len(Happy)} samples in the Happy expression\")\n","print(f\"There are {len(Sad)} samples in the Sad expression\")\n","print(f\"There are {len(Surprise)} samples in the Surprise expression\")\n","print(f\"There are {len(Neutral)} samples in the Neutral expression\")"],"execution_count":11,"outputs":[{"output_type":"stream","text":["There are 3995 samples in the Angry expression\n","There are 436 samples in the Disgust expression\n","There are 4097 samples in the Fear expression\n","There are 7215 samples in the Happy expression\n","There are 4830 samples in the Sad expression\n","There are 3171 samples in the Surprise expression\n","There are 4965 samples in the Neutral expression\n"],"name":"stdout"}]},{"cell_type":"markdown","metadata":{"id":"GCyGugNIRgT1"},"source":["**(c) Image classification with FNNs: In this part, you will use a feedforward neural network (FNN) (also called “multilayer perceptron”) to perform the emotion classification task. The input of the FNN comprises of all the pixels of the image.**"]},{"cell_type":"code","metadata":{"id":"7N78uWhmRgT2","executionInfo":{"status":"ok","timestamp":1603327077917,"user_tz":300,"elapsed":1470,"user":{"displayName":"Qusai Amer","photoUrl":"https://lh6.googleusercontent.com/-jAP82gBhj-8/AAAAAAAAAAI/AAAAAAAAA9Y/SV0jzmWT_-E/s64/photo.jpg","userId":"00843738786401489735"}}},"source":["# Preprocessing: Normalize the images.\n","imgs_train_norm = (imgs_train / 255) - 0.5 \n","imgs_val_norm = (imgs_val / 255) - 0.5\n","imgs_test_norm = (imgs_test / 255) - 0.5\n"],"execution_count":12,"outputs":[]},{"cell_type":"code","metadata":{"id":"Febt9movRgT7","executionInfo":{"status":"ok","timestamp":1603327077920,"user_tz":300,"elapsed":718,"user":{"displayName":"Qusai Amer","photoUrl":"https://lh6.googleusercontent.com/-jAP82gBhj-8/AAAAAAAAAAI/AAAAAAAAA9Y/SV0jzmWT_-E/s64/photo.jpg","userId":"00843738786401489735"}},"outputId":"f85f1a4b-0758-4c77-8027-5f5a4e304409","colab":{"base_uri":"https://localhost:8080/","height":136}},"source":["imgs_train[0] #Before normalization"],"execution_count":13,"outputs":[{"output_type":"execute_result","data":{"text/plain":["array([[ 70,  80,  82, ...,  52,  43,  41],\n","       [ 65,  61,  58, ...,  56,  52,  44],\n","       [ 50,  43,  54, ...,  49,  56,  47],\n","       ...,\n","       [ 91,  65,  42, ...,  72,  56,  43],\n","       [ 77,  82,  79, ..., 105,  70,  46],\n","       [ 77,  72,  84, ..., 106, 109,  82]])"]},"metadata":{"tags":[]},"execution_count":13}]},{"cell_type":"code","metadata":{"id":"RsXO13gjRgT-","executionInfo":{"status":"ok","timestamp":1603327078036,"user_tz":300,"elapsed":724,"user":{"displayName":"Qusai Amer","photoUrl":"https://lh6.googleusercontent.com/-jAP82gBhj-8/AAAAAAAAAAI/AAAAAAAAA9Y/SV0jzmWT_-E/s64/photo.jpg","userId":"00843738786401489735"}},"outputId":"7cc958b5-a881-4fb4-e075-d3aee71a7b40","colab":{"base_uri":"https://localhost:8080/","height":238}},"source":["imgs_train_norm[0] #After normalization "],"execution_count":14,"outputs":[{"output_type":"execute_result","data":{"text/plain":["array([[-0.2254902 , -0.18627451, -0.17843137, ..., -0.29607843,\n","        -0.33137255, -0.33921569],\n","       [-0.24509804, -0.26078431, -0.27254902, ..., -0.28039216,\n","        -0.29607843, -0.32745098],\n","       [-0.30392157, -0.33137255, -0.28823529, ..., -0.30784314,\n","        -0.28039216, -0.31568627],\n","       ...,\n","       [-0.14313725, -0.24509804, -0.33529412, ..., -0.21764706,\n","        -0.28039216, -0.33137255],\n","       [-0.19803922, -0.17843137, -0.19019608, ..., -0.08823529,\n","        -0.2254902 , -0.31960784],\n","       [-0.19803922, -0.21764706, -0.17058824, ..., -0.08431373,\n","        -0.07254902, -0.17843137]])"]},"metadata":{"tags":[]},"execution_count":14}]},{"cell_type":"markdown","metadata":{"id":"YU1ogsknRgUi"},"source":["#### FNN Combination One"]},{"cell_type":"code","metadata":{"id":"wJMX0n6bRgUj","executionInfo":{"status":"ok","timestamp":1603327087941,"user_tz":300,"elapsed":5792,"user":{"displayName":"Qusai Amer","photoUrl":"https://lh6.googleusercontent.com/-jAP82gBhj-8/AAAAAAAAAAI/AAAAAAAAA9Y/SV0jzmWT_-E/s64/photo.jpg","userId":"00843738786401489735"}},"outputId":"a6a85692-4bd7-43e2-ca1a-ff37765e5b78","colab":{"base_uri":"https://localhost:8080/","height":238}},"source":["import warnings\n","warnings.filterwarnings(\"ignore\")  # Ignore some warning logs\n","\n","\n","from keras.models import Sequential\n","from keras.layers import Dense, Dropout\n","\n","\n","#  Define a Feed-Forward Model with 2 hidden layers with dimensions nodes1 and nodes2 Neurons\n","model = Sequential([\n","  Dense(2304//2, activation='relu', input_shape=(48*48,), name=\"first_hidden_layer\"),\n","  Dense(7, activation='softmax'), #converts output to probabilities \n","])\n","\n","#  Validate your Model Architecture\n","print(model.summary())\n","\n","\n","#Dense(2304//8, activation='relu', name=\"third_hidden_layer\"), Dropout(0.3),"],"execution_count":15,"outputs":[{"output_type":"stream","text":["Model: \"sequential\"\n","_________________________________________________________________\n","Layer (type)                 Output Shape              Param #   \n","=================================================================\n","first_hidden_layer (Dense)   (None, 1152)              2655360   \n","_________________________________________________________________\n","dense (Dense)                (None, 7)                 8071      \n","=================================================================\n","Total params: 2,663,431\n","Trainable params: 2,663,431\n","Non-trainable params: 0\n","_________________________________________________________________\n","None\n"],"name":"stdout"}]},{"cell_type":"code","metadata":{"id":"g4tHhY74RgUm","executionInfo":{"status":"ok","timestamp":1603327124620,"user_tz":300,"elapsed":41695,"user":{"displayName":"Qusai Amer","photoUrl":"https://lh6.googleusercontent.com/-jAP82gBhj-8/AAAAAAAAAAI/AAAAAAAAA9Y/SV0jzmWT_-E/s64/photo.jpg","userId":"00843738786401489735"}},"outputId":"582800d6-5f6e-467d-d949-65ac17e81450","colab":{"base_uri":"https://localhost:8080/","height":1771}},"source":["import time\n","start = time.time()\n","# Compile model\n","model.compile(optimizer='sgd', loss='categorical_crossentropy',metrics=['accuracy'],)\n","\n","# Flatten the images into vectors (1D) for feed forward network\n","flatten_imgs_train = imgs_train_norm.reshape((-1, 48*48))\n","flatten_imgs_val = imgs_val_norm.reshape((-1, 48*48))\n","print(labels_train)\n","\n","# Train model\n","val = (flatten_imgs_val,to_categorical(labels_val))\n","history = model.fit(flatten_imgs_train, to_categorical(labels_train), epochs=50, batch_size=200,validation_data=val)\n","end = time.time()\n","elapsed = end - start\n","print(f\"The running tine is {round(elapsed,1)} sec\")\n"],"execution_count":16,"outputs":[{"output_type":"stream","text":["[0 0 2 ... 4 0 4]\n","Epoch 1/50\n","144/144 [==============================] - 1s 6ms/step - loss: 1.8083 - accuracy: 0.2620 - val_loss: 1.7464 - val_accuracy: 0.2967\n","Epoch 2/50\n","144/144 [==============================] - 1s 5ms/step - loss: 1.7297 - accuracy: 0.3135 - val_loss: 1.7094 - val_accuracy: 0.3299\n","Epoch 3/50\n","144/144 [==============================] - 1s 5ms/step - loss: 1.6964 - accuracy: 0.3413 - val_loss: 1.6850 - val_accuracy: 0.3502\n","Epoch 4/50\n","144/144 [==============================] - 1s 5ms/step - loss: 1.6714 - accuracy: 0.3549 - val_loss: 1.6663 - val_accuracy: 0.3639\n","Epoch 5/50\n","144/144 [==============================] - 1s 5ms/step - loss: 1.6517 - accuracy: 0.3686 - val_loss: 1.6514 - val_accuracy: 0.3711\n","Epoch 6/50\n","144/144 [==============================] - 1s 5ms/step - loss: 1.6355 - accuracy: 0.3754 - val_loss: 1.6394 - val_accuracy: 0.3748\n","Epoch 7/50\n","144/144 [==============================] - 1s 5ms/step - loss: 1.6214 - accuracy: 0.3822 - val_loss: 1.6310 - val_accuracy: 0.3711\n","Epoch 8/50\n","144/144 [==============================] - 1s 5ms/step - loss: 1.6099 - accuracy: 0.3868 - val_loss: 1.6230 - val_accuracy: 0.3798\n","Epoch 9/50\n","144/144 [==============================] - 1s 5ms/step - loss: 1.5997 - accuracy: 0.3905 - val_loss: 1.6156 - val_accuracy: 0.3851\n","Epoch 10/50\n","144/144 [==============================] - 1s 5ms/step - loss: 1.5905 - accuracy: 0.3942 - val_loss: 1.6090 - val_accuracy: 0.3890\n","Epoch 11/50\n","144/144 [==============================] - 1s 5ms/step - loss: 1.5823 - accuracy: 0.3980 - val_loss: 1.6046 - val_accuracy: 0.3862\n","Epoch 12/50\n","144/144 [==============================] - 1s 5ms/step - loss: 1.5748 - accuracy: 0.4035 - val_loss: 1.6000 - val_accuracy: 0.3906\n","Epoch 13/50\n","144/144 [==============================] - 1s 4ms/step - loss: 1.5676 - accuracy: 0.4067 - val_loss: 1.5955 - val_accuracy: 0.3920\n","Epoch 14/50\n","144/144 [==============================] - 1s 5ms/step - loss: 1.5606 - accuracy: 0.4095 - val_loss: 1.5927 - val_accuracy: 0.3976\n","Epoch 15/50\n","144/144 [==============================] - 1s 5ms/step - loss: 1.5546 - accuracy: 0.4134 - val_loss: 1.5886 - val_accuracy: 0.3987\n","Epoch 16/50\n","144/144 [==============================] - 1s 5ms/step - loss: 1.5481 - accuracy: 0.4152 - val_loss: 1.5863 - val_accuracy: 0.3998\n","Epoch 17/50\n","144/144 [==============================] - 1s 5ms/step - loss: 1.5424 - accuracy: 0.4179 - val_loss: 1.5821 - val_accuracy: 0.4012\n","Epoch 18/50\n","144/144 [==============================] - 1s 5ms/step - loss: 1.5368 - accuracy: 0.4196 - val_loss: 1.5799 - val_accuracy: 0.4032\n","Epoch 19/50\n","144/144 [==============================] - 1s 5ms/step - loss: 1.5314 - accuracy: 0.4209 - val_loss: 1.5781 - val_accuracy: 0.4023\n","Epoch 20/50\n","144/144 [==============================] - 1s 5ms/step - loss: 1.5261 - accuracy: 0.4247 - val_loss: 1.5764 - val_accuracy: 0.4012\n","Epoch 21/50\n","144/144 [==============================] - 1s 5ms/step - loss: 1.5209 - accuracy: 0.4262 - val_loss: 1.5726 - val_accuracy: 0.4065\n","Epoch 22/50\n","144/144 [==============================] - 1s 5ms/step - loss: 1.5156 - accuracy: 0.4297 - val_loss: 1.5723 - val_accuracy: 0.4090\n","Epoch 23/50\n","144/144 [==============================] - 1s 5ms/step - loss: 1.5109 - accuracy: 0.4322 - val_loss: 1.5686 - val_accuracy: 0.4079\n","Epoch 24/50\n","144/144 [==============================] - 1s 4ms/step - loss: 1.5061 - accuracy: 0.4330 - val_loss: 1.5674 - val_accuracy: 0.4065\n","Epoch 25/50\n","144/144 [==============================] - 1s 4ms/step - loss: 1.5013 - accuracy: 0.4362 - val_loss: 1.5660 - val_accuracy: 0.4071\n","Epoch 26/50\n","144/144 [==============================] - 1s 5ms/step - loss: 1.4967 - accuracy: 0.4386 - val_loss: 1.5641 - val_accuracy: 0.4051\n","Epoch 27/50\n","144/144 [==============================] - 1s 5ms/step - loss: 1.4919 - accuracy: 0.4411 - val_loss: 1.5625 - val_accuracy: 0.4054\n","Epoch 28/50\n","144/144 [==============================] - 1s 5ms/step - loss: 1.4873 - accuracy: 0.4428 - val_loss: 1.5605 - val_accuracy: 0.4085\n","Epoch 29/50\n","144/144 [==============================] - 1s 5ms/step - loss: 1.4829 - accuracy: 0.4444 - val_loss: 1.5593 - val_accuracy: 0.4035\n","Epoch 30/50\n","144/144 [==============================] - 1s 5ms/step - loss: 1.4784 - accuracy: 0.4460 - val_loss: 1.5563 - val_accuracy: 0.4043\n","Epoch 31/50\n","144/144 [==============================] - 1s 5ms/step - loss: 1.4741 - accuracy: 0.4490 - val_loss: 1.5548 - val_accuracy: 0.4076\n","Epoch 32/50\n","144/144 [==============================] - 1s 5ms/step - loss: 1.4697 - accuracy: 0.4510 - val_loss: 1.5544 - val_accuracy: 0.4048\n","Epoch 33/50\n","144/144 [==============================] - 1s 5ms/step - loss: 1.4652 - accuracy: 0.4537 - val_loss: 1.5533 - val_accuracy: 0.4121\n","Epoch 34/50\n","144/144 [==============================] - 1s 5ms/step - loss: 1.4610 - accuracy: 0.4560 - val_loss: 1.5512 - val_accuracy: 0.4090\n","Epoch 35/50\n","144/144 [==============================] - 1s 5ms/step - loss: 1.4565 - accuracy: 0.4570 - val_loss: 1.5507 - val_accuracy: 0.4082\n","Epoch 36/50\n","144/144 [==============================] - 1s 5ms/step - loss: 1.4526 - accuracy: 0.4583 - val_loss: 1.5480 - val_accuracy: 0.4093\n","Epoch 37/50\n","144/144 [==============================] - 1s 5ms/step - loss: 1.4479 - accuracy: 0.4615 - val_loss: 1.5474 - val_accuracy: 0.4099\n","Epoch 38/50\n","144/144 [==============================] - 1s 5ms/step - loss: 1.4440 - accuracy: 0.4647 - val_loss: 1.5476 - val_accuracy: 0.4060\n","Epoch 39/50\n","144/144 [==============================] - 1s 5ms/step - loss: 1.4399 - accuracy: 0.4652 - val_loss: 1.5460 - val_accuracy: 0.4101\n","Epoch 40/50\n","144/144 [==============================] - 1s 5ms/step - loss: 1.4358 - accuracy: 0.4678 - val_loss: 1.5441 - val_accuracy: 0.4074\n","Epoch 41/50\n","144/144 [==============================] - 1s 5ms/step - loss: 1.4317 - accuracy: 0.4687 - val_loss: 1.5424 - val_accuracy: 0.4074\n","Epoch 42/50\n","144/144 [==============================] - 1s 5ms/step - loss: 1.4276 - accuracy: 0.4698 - val_loss: 1.5422 - val_accuracy: 0.4040\n","Epoch 43/50\n","144/144 [==============================] - 1s 5ms/step - loss: 1.4236 - accuracy: 0.4723 - val_loss: 1.5401 - val_accuracy: 0.4079\n","Epoch 44/50\n","144/144 [==============================] - 1s 5ms/step - loss: 1.4194 - accuracy: 0.4741 - val_loss: 1.5392 - val_accuracy: 0.4060\n","Epoch 45/50\n","144/144 [==============================] - 1s 5ms/step - loss: 1.4155 - accuracy: 0.4767 - val_loss: 1.5393 - val_accuracy: 0.4074\n","Epoch 46/50\n","144/144 [==============================] - 1s 5ms/step - loss: 1.4115 - accuracy: 0.4763 - val_loss: 1.5385 - val_accuracy: 0.4035\n","Epoch 47/50\n","144/144 [==============================] - 1s 5ms/step - loss: 1.4075 - accuracy: 0.4805 - val_loss: 1.5373 - val_accuracy: 0.4062\n","Epoch 48/50\n","144/144 [==============================] - 1s 5ms/step - loss: 1.4034 - accuracy: 0.4820 - val_loss: 1.5355 - val_accuracy: 0.4060\n","Epoch 49/50\n","144/144 [==============================] - 1s 5ms/step - loss: 1.3994 - accuracy: 0.4829 - val_loss: 1.5364 - val_accuracy: 0.4037\n","Epoch 50/50\n","144/144 [==============================] - 1s 5ms/step - loss: 1.3955 - accuracy: 0.4869 - val_loss: 1.5349 - val_accuracy: 0.4054\n","The running tine is 36.8 sec\n"],"name":"stdout"}]},{"cell_type":"code","metadata":{"id":"KKKbB_FNRgUp","executionInfo":{"status":"ok","timestamp":1603163913589,"user_tz":300,"elapsed":602,"user":{"displayName":"Qusai Amer","photoUrl":"https://lh6.googleusercontent.com/-jAP82gBhj-8/AAAAAAAAAAI/AAAAAAAAA9Y/SV0jzmWT_-E/s64/photo.jpg","userId":"00843738786401489735"}},"outputId":"2dd48c35-b582-4fb7-b8a7-29b410039e6c","colab":{"base_uri":"https://localhost:8080/","height":34}},"source":["# Evaluate your model's performance on the val data\n","flatten_imgs_test = imgs_test_norm.reshape((-1, 48*48))\n","performance = model.evaluate(flatten_imgs_val, to_categorical(labels_val))"],"execution_count":null,"outputs":[{"output_type":"stream","text":["113/113 [==============================] - 0s 2ms/step - loss: 1.5361 - accuracy: 0.4076\n"],"name":"stdout"}]},{"cell_type":"code","metadata":{"id":"C8aqPsP_RgUv","executionInfo":{"status":"ok","timestamp":1603163918563,"user_tz":300,"elapsed":426,"user":{"displayName":"Qusai Amer","photoUrl":"https://lh6.googleusercontent.com/-jAP82gBhj-8/AAAAAAAAAAI/AAAAAAAAA9Y/SV0jzmWT_-E/s64/photo.jpg","userId":"00843738786401489735"}},"outputId":"567fef26-2f14-41ae-b1e6-fac14a752fb2","colab":{"base_uri":"https://localhost:8080/","height":295}},"source":["plt.plot(history.history['loss'])\n","# plt.plot(history.history['accuracy'])\n","\n","plt.plot(history.history['val_loss'])\n","plt.title('model loss')\n","plt.ylabel('loss')\n","plt.xlabel('epoch')\n","plt.legend(['train', 'val'], loc='upper left')\n","plt.show()"],"execution_count":null,"outputs":[{"output_type":"display_data","data":{"image/png":"\n","text/plain":["<Figure size 432x288 with 1 Axes>"]},"metadata":{"tags":[],"needs_background":"light"}}]},{"cell_type":"code","metadata":{"id":"NZi2c-7bRgUy","outputId":"d377fc7b-ca70-44bf-c6b0-21e2f9395eea"},"source":["print(history.history.keys())"],"execution_count":null,"outputs":[{"output_type":"stream","text":["dict_keys(['loss', 'accuracy', 'val_loss', 'val_accuracy'])\n"],"name":"stdout"}]},{"cell_type":"markdown","metadata":{"id":"D8KOp1ZxRgU3"},"source":["#### FNN Combination Two"]},{"cell_type":"code","metadata":{"id":"vTsdqPTnRgU4","executionInfo":{"status":"ok","timestamp":1603292599335,"user_tz":300,"elapsed":6152,"user":{"displayName":"Qusai Amer","photoUrl":"https://lh6.googleusercontent.com/-jAP82gBhj-8/AAAAAAAAAAI/AAAAAAAAA9Y/SV0jzmWT_-E/s64/photo.jpg","userId":"00843738786401489735"}},"outputId":"9ec74ca4-76bd-4ea3-de86-1ceaaf77266f","colab":{"base_uri":"https://localhost:8080/","height":306}},"source":["import warnings\n","warnings.filterwarnings(\"ignore\")  # Ignore some warning logs\n","\n","\n","from keras.models import Sequential\n","from keras.layers import Dense, Dropout\n","\n","\n","#  Define a Feed-Forward Model with 2 hidden layers with dimensions nodes1 and nodes2 Neurons\n","model = Sequential([\n","  Dense(2304//2, activation='relu', input_shape=(48*48,), name=\"first_hidden_layer\"),\n","  Dense(2304//6, activation='relu', name=\"second_hidden_layer\"), Dropout(0.25),\n","  Dense(7, activation='softmax'), #converts output to probabilities \n","])\n","\n","#  Validate your Model Architecture\n","print(model.summary())\n"],"execution_count":25,"outputs":[{"output_type":"stream","text":["Model: \"sequential\"\n","_________________________________________________________________\n","Layer (type)                 Output Shape              Param #   \n","=================================================================\n","first_hidden_layer (Dense)   (None, 1152)              2655360   \n","_________________________________________________________________\n","second_hidden_layer (Dense)  (None, 384)               442752    \n","_________________________________________________________________\n","dropout (Dropout)            (None, 384)               0         \n","_________________________________________________________________\n","dense (Dense)                (None, 7)                 2695      \n","=================================================================\n","Total params: 3,100,807\n","Trainable params: 3,100,807\n","Non-trainable params: 0\n","_________________________________________________________________\n","None\n"],"name":"stdout"}]},{"cell_type":"code","metadata":{"id":"2bkj8m_iRgU8","executionInfo":{"status":"ok","timestamp":1603292628561,"user_tz":300,"elapsed":20508,"user":{"displayName":"Qusai Amer","photoUrl":"https://lh6.googleusercontent.com/-jAP82gBhj-8/AAAAAAAAAAI/AAAAAAAAA9Y/SV0jzmWT_-E/s64/photo.jpg","userId":"00843738786401489735"}},"outputId":"fa68e88d-5e3a-42a4-d020-02d07c7fda6d","colab":{"base_uri":"https://localhost:8080/","height":581}},"source":["import time\n","start = time.time()\n","\n","# Compile model\n","model.compile(optimizer='sgd', loss='categorical_crossentropy',metrics=['accuracy'],)\n","\n","# Flatten the images into vectors (1D) for feed forward network\n","flatten_imgs_train = imgs_train_norm.reshape((-1, 48*48))\n","flatten_imgs_val = imgs_val_norm.reshape((-1, 48*48))\n","print(labels_train)\n","\n","# Train model\n","val = (flatten_imgs_val,to_categorical(labels_val))\n","history = model.fit(flatten_imgs_train, to_categorical(labels_train), epochs=15, batch_size=200,validation_data=val)\n","end = time.time()\n","elapsed = end - start\n","print(f\"The running tine is {round(elapsed,1)} sec\")"],"execution_count":26,"outputs":[{"output_type":"stream","text":["[0 0 2 ... 4 0 4]\n","Epoch 1/15\n","144/144 [==============================] - 1s 9ms/step - loss: 1.8135 - accuracy: 0.2545 - val_loss: 1.7503 - val_accuracy: 0.3029\n","Epoch 2/15\n","144/144 [==============================] - 1s 8ms/step - loss: 1.7458 - accuracy: 0.2991 - val_loss: 1.7166 - val_accuracy: 0.3263\n","Epoch 3/15\n","144/144 [==============================] - 1s 8ms/step - loss: 1.7142 - accuracy: 0.3226 - val_loss: 1.6901 - val_accuracy: 0.3427\n","Epoch 4/15\n","144/144 [==============================] - 1s 8ms/step - loss: 1.6894 - accuracy: 0.3396 - val_loss: 1.6695 - val_accuracy: 0.3550\n","Epoch 5/15\n","144/144 [==============================] - 1s 8ms/step - loss: 1.6649 - accuracy: 0.3528 - val_loss: 1.6497 - val_accuracy: 0.3636\n","Epoch 6/15\n","144/144 [==============================] - 1s 8ms/step - loss: 1.6457 - accuracy: 0.3640 - val_loss: 1.6330 - val_accuracy: 0.3720\n","Epoch 7/15\n","144/144 [==============================] - 1s 8ms/step - loss: 1.6307 - accuracy: 0.3707 - val_loss: 1.6215 - val_accuracy: 0.3770\n","Epoch 8/15\n","144/144 [==============================] - 1s 8ms/step - loss: 1.6171 - accuracy: 0.3734 - val_loss: 1.6124 - val_accuracy: 0.3798\n","Epoch 9/15\n","144/144 [==============================] - 1s 8ms/step - loss: 1.6047 - accuracy: 0.3847 - val_loss: 1.6045 - val_accuracy: 0.3817\n","Epoch 10/15\n","144/144 [==============================] - 1s 8ms/step - loss: 1.5926 - accuracy: 0.3878 - val_loss: 1.5967 - val_accuracy: 0.3853\n","Epoch 11/15\n","144/144 [==============================] - 1s 8ms/step - loss: 1.5824 - accuracy: 0.3948 - val_loss: 1.5913 - val_accuracy: 0.3915\n","Epoch 12/15\n","144/144 [==============================] - 1s 8ms/step - loss: 1.5733 - accuracy: 0.3968 - val_loss: 1.5861 - val_accuracy: 0.3892\n","Epoch 13/15\n","144/144 [==============================] - 1s 8ms/step - loss: 1.5650 - accuracy: 0.4014 - val_loss: 1.5803 - val_accuracy: 0.3951\n","Epoch 14/15\n","144/144 [==============================] - 1s 8ms/step - loss: 1.5563 - accuracy: 0.4044 - val_loss: 1.5768 - val_accuracy: 0.3984\n","Epoch 15/15\n","144/144 [==============================] - 1s 8ms/step - loss: 1.5493 - accuracy: 0.4086 - val_loss: 1.5736 - val_accuracy: 0.3968\n","The running tine is 19.6 sec\n"],"name":"stdout"}]},{"cell_type":"code","metadata":{"id":"X3GZM9u0RgVA","executionInfo":{"status":"ok","timestamp":1603164286551,"user_tz":300,"elapsed":627,"user":{"displayName":"Qusai Amer","photoUrl":"https://lh6.googleusercontent.com/-jAP82gBhj-8/AAAAAAAAAAI/AAAAAAAAA9Y/SV0jzmWT_-E/s64/photo.jpg","userId":"00843738786401489735"}},"outputId":"88dbe785-5134-4952-d400-900b1cf0a856","colab":{"base_uri":"https://localhost:8080/","height":34}},"source":["# Evaluate your model's performance on the val data\n","\n","performance = model.evaluate(flatten_imgs_val, to_categorical(labels_val))"],"execution_count":null,"outputs":[{"output_type":"stream","text":["113/113 [==============================] - 0s 2ms/step - loss: 1.6054 - accuracy: 0.3906\n"],"name":"stdout"}]},{"cell_type":"code","metadata":{"id":"Mes6Zlf4RgVD","executionInfo":{"status":"ok","timestamp":1603292664708,"user_tz":300,"elapsed":1345,"user":{"displayName":"Qusai Amer","photoUrl":"https://lh6.googleusercontent.com/-jAP82gBhj-8/AAAAAAAAAAI/AAAAAAAAA9Y/SV0jzmWT_-E/s64/photo.jpg","userId":"00843738786401489735"}},"outputId":"8bb11703-1dcb-4d30-a05d-19af68ea004c","colab":{"base_uri":"https://localhost:8080/","height":295}},"source":["plt.plot(history.history['loss'])\n","# plt.plot(history.history['accuracy'])\n","\n","plt.plot(history.history['val_loss'])\n","plt.title('model loss')\n","plt.ylabel('loss')\n","plt.xlabel('epoch')\n","plt.legend(['train', 'val'], loc='upper left')\n","plt.show()"],"execution_count":27,"outputs":[{"output_type":"display_data","data":{"image/png":"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\n","text/plain":["<Figure size 432x288 with 1 Axes>"]},"metadata":{"tags":[],"needs_background":"light"}}]},{"cell_type":"markdown","metadata":{"id":"YXQBA1M0RgVG"},"source":["#### FNN Combination Three"]},{"cell_type":"code","metadata":{"id":"FRpvijeHRgVH","executionInfo":{"status":"ok","timestamp":1603292911347,"user_tz":300,"elapsed":538,"user":{"displayName":"Qusai Amer","photoUrl":"https://lh6.googleusercontent.com/-jAP82gBhj-8/AAAAAAAAAAI/AAAAAAAAA9Y/SV0jzmWT_-E/s64/photo.jpg","userId":"00843738786401489735"}},"outputId":"ad67e4b8-3ae9-4eb0-a43e-da9b09baa212","colab":{"base_uri":"https://localhost:8080/","height":306}},"source":["import warnings\n","warnings.filterwarnings(\"ignore\")  # Ignore some warning logs\n","\n","\n","from keras.models import Sequential\n","from keras.layers import Dense, Dropout\n","\n","\n","#  Define a Feed-Forward Model with 2 hidden layers with dimensions nodes1 and nodes2 Neurons\n","model = Sequential([\n","  Dense(2304//2, activation='relu', input_shape=(48*48,), name=\"first_hidden_layer\"),\n","  Dense(2304//6, activation='relu', name=\"second_hidden_layer\"), Dropout(0.25),\n","  Dense(7, activation='softmax'), #converts output to probabilities \n","])\n","\n","#  Validate your Model Architecture\n","print(model.summary())\n"],"execution_count":28,"outputs":[{"output_type":"stream","text":["Model: \"sequential_1\"\n","_________________________________________________________________\n","Layer (type)                 Output Shape              Param #   \n","=================================================================\n","first_hidden_layer (Dense)   (None, 1152)              2655360   \n","_________________________________________________________________\n","second_hidden_layer (Dense)  (None, 384)               442752    \n","_________________________________________________________________\n","dropout_1 (Dropout)          (None, 384)               0         \n","_________________________________________________________________\n","dense_1 (Dense)              (None, 7)                 2695      \n","=================================================================\n","Total params: 3,100,807\n","Trainable params: 3,100,807\n","Non-trainable params: 0\n","_________________________________________________________________\n","None\n"],"name":"stdout"}]},{"cell_type":"code","metadata":{"id":"2BhrFn1SRgVK","executionInfo":{"status":"ok","timestamp":1603292944540,"user_tz":300,"elapsed":30559,"user":{"displayName":"Qusai Amer","photoUrl":"https://lh6.googleusercontent.com/-jAP82gBhj-8/AAAAAAAAAAI/AAAAAAAAA9Y/SV0jzmWT_-E/s64/photo.jpg","userId":"00843738786401489735"}},"outputId":"a55ebbbc-49ec-4381-c5c6-d727c3e039f9","colab":{"base_uri":"https://localhost:8080/","height":581}},"source":["import time\n","start = time.time()\n","\n","# Compile model\n","model.compile(optimizer='adam', loss='categorical_crossentropy',metrics=['accuracy'],)\n","\n","# Flatten the images into vectors (1D) for feed forward network\n","flatten_imgs_train = imgs_train_norm.reshape((-1, 48*48))\n","flatten_imgs_val = imgs_val_norm.reshape((-1, 48*48))\n","print(labels_train)\n","\n","# Train model\n","val = (flatten_imgs_val,to_categorical(labels_val))\n","history = model.fit(flatten_imgs_train, to_categorical(labels_train), epochs=15, batch_size=100,validation_data=val)\n","end = time.time()\n","elapsed = end - start\n","print(f\"The running time is {round(elapsed,1)} sec\")"],"execution_count":29,"outputs":[{"output_type":"stream","text":["[0 0 2 ... 4 0 4]\n","Epoch 1/15\n","288/288 [==============================] - 2s 7ms/step - loss: 1.6996 - accuracy: 0.3254 - val_loss: 1.6208 - val_accuracy: 0.3675\n","Epoch 2/15\n","288/288 [==============================] - 2s 7ms/step - loss: 1.5784 - accuracy: 0.3837 - val_loss: 1.5732 - val_accuracy: 0.3778\n","Epoch 3/15\n","288/288 [==============================] - 2s 7ms/step - loss: 1.5061 - accuracy: 0.4124 - val_loss: 1.5393 - val_accuracy: 0.3962\n","Epoch 4/15\n","288/288 [==============================] - 2s 7ms/step - loss: 1.4490 - accuracy: 0.4349 - val_loss: 1.5369 - val_accuracy: 0.4026\n","Epoch 5/15\n","288/288 [==============================] - 2s 7ms/step - loss: 1.3918 - accuracy: 0.4591 - val_loss: 1.5199 - val_accuracy: 0.4179\n","Epoch 6/15\n","288/288 [==============================] - 2s 7ms/step - loss: 1.3306 - accuracy: 0.4855 - val_loss: 1.5034 - val_accuracy: 0.4285\n","Epoch 7/15\n","288/288 [==============================] - 2s 7ms/step - loss: 1.2590 - accuracy: 0.5156 - val_loss: 1.5149 - val_accuracy: 0.4394\n","Epoch 8/15\n","288/288 [==============================] - 2s 7ms/step - loss: 1.1939 - accuracy: 0.5400 - val_loss: 1.5201 - val_accuracy: 0.4324\n","Epoch 9/15\n","288/288 [==============================] - 2s 7ms/step - loss: 1.1170 - accuracy: 0.5664 - val_loss: 1.5845 - val_accuracy: 0.4503\n","Epoch 10/15\n","288/288 [==============================] - 2s 7ms/step - loss: 1.0526 - accuracy: 0.5974 - val_loss: 1.5933 - val_accuracy: 0.4572\n","Epoch 11/15\n","288/288 [==============================] - 2s 7ms/step - loss: 0.9779 - accuracy: 0.6243 - val_loss: 1.6637 - val_accuracy: 0.4411\n","Epoch 12/15\n","288/288 [==============================] - 2s 7ms/step - loss: 0.9008 - accuracy: 0.6558 - val_loss: 1.7215 - val_accuracy: 0.4600\n","Epoch 13/15\n","288/288 [==============================] - 2s 7ms/step - loss: 0.8329 - accuracy: 0.6837 - val_loss: 1.7660 - val_accuracy: 0.4611\n","Epoch 14/15\n","288/288 [==============================] - 2s 7ms/step - loss: 0.7717 - accuracy: 0.7096 - val_loss: 1.8053 - val_accuracy: 0.4425\n","Epoch 15/15\n","288/288 [==============================] - 2s 7ms/step - loss: 0.7077 - accuracy: 0.7336 - val_loss: 1.9106 - val_accuracy: 0.4678\n","The running time is 30.1 sec\n"],"name":"stdout"}]},{"cell_type":"code","metadata":{"id":"xeSTx1ZVRgVO","executionInfo":{"status":"ok","timestamp":1603292958460,"user_tz":300,"elapsed":1033,"user":{"displayName":"Qusai Amer","photoUrl":"https://lh6.googleusercontent.com/-jAP82gBhj-8/AAAAAAAAAAI/AAAAAAAAA9Y/SV0jzmWT_-E/s64/photo.jpg","userId":"00843738786401489735"}},"outputId":"eaccf10c-b74e-4a3d-d529-5655e769989f","colab":{"base_uri":"https://localhost:8080/","height":34}},"source":["# Evaluate your model's performance on the val data\n","flatten_imgs_test = imgs_test_norm.reshape((-1, 48*48))\n","\n","\n","performance = model.evaluate(flatten_imgs_val, to_categorical(labels_val))\n"],"execution_count":30,"outputs":[{"output_type":"stream","text":["113/113 [==============================] - 0s 4ms/step - loss: 1.9106 - accuracy: 0.4678\n"],"name":"stdout"}]},{"cell_type":"code","metadata":{"scrolled":true,"id":"NTTzjunzRgVV","executionInfo":{"status":"ok","timestamp":1603292964024,"user_tz":300,"elapsed":1169,"user":{"displayName":"Qusai Amer","photoUrl":"https://lh6.googleusercontent.com/-jAP82gBhj-8/AAAAAAAAAAI/AAAAAAAAA9Y/SV0jzmWT_-E/s64/photo.jpg","userId":"00843738786401489735"}},"outputId":"ee804afd-3f4a-457e-acc8-840a763a5854","colab":{"base_uri":"https://localhost:8080/","height":295}},"source":["plt.plot(history.history['loss'])\n","# plt.plot(history.history['accuracy'])\n","\n","plt.plot(history.history['val_loss'])\n","plt.title('model loss')\n","plt.ylabel('loss')\n","plt.xlabel('epoch')\n","plt.legend(['train', 'val'], loc='upper left')\n","plt.show()"],"execution_count":31,"outputs":[{"output_type":"display_data","data":{"image/png":"\n","text/plain":["<Figure size 432x288 with 1 Axes>"]},"metadata":{"tags":[],"needs_background":"light"}}]},{"cell_type":"markdown","metadata":{"id":"nb2zUGTYHcTo"},"source":["FNN Combination four"]},{"cell_type":"code","metadata":{"id":"yT0SWIUtHal7","executionInfo":{"status":"ok","timestamp":1603293621324,"user_tz":300,"elapsed":1111,"user":{"displayName":"Qusai Amer","photoUrl":"https://lh6.googleusercontent.com/-jAP82gBhj-8/AAAAAAAAAAI/AAAAAAAAA9Y/SV0jzmWT_-E/s64/photo.jpg","userId":"00843738786401489735"}},"outputId":"38e0f5b6-6a38-4a02-d71a-71db66780e04","colab":{"base_uri":"https://localhost:8080/","height":306}},"source":["import warnings\n","warnings.filterwarnings(\"ignore\")  # Ignore some warning logs\n","\n","\n","from keras.models import Sequential\n","from keras.layers import Dense, Dropout\n","\n","\n","#  Define a Feed-Forward Model with 2 hidden layers with dimensions nodes1 and nodes2 Neurons\n","model = Sequential([\n","  Dense(2304//2, activation='relu', input_shape=(48*48,), name=\"first_hidden_layer\"),\n","  Dense(2304//5, activation='relu', name=\"second_hidden_layer\"), Dropout(0.25),\n","  Dense(7, activation='softmax'), #converts output to probabilities \n","])\n","\n","#  Validate your Model Architecture\n","print(model.summary())\n"],"execution_count":32,"outputs":[{"output_type":"stream","text":["Model: \"sequential_2\"\n","_________________________________________________________________\n","Layer (type)                 Output Shape              Param #   \n","=================================================================\n","first_hidden_layer (Dense)   (None, 1152)              2655360   \n","_________________________________________________________________\n","second_hidden_layer (Dense)  (None, 460)               530380    \n","_________________________________________________________________\n","dropout_2 (Dropout)          (None, 460)               0         \n","_________________________________________________________________\n","dense_2 (Dense)              (None, 7)                 3227      \n","=================================================================\n","Total params: 3,188,967\n","Trainable params: 3,188,967\n","Non-trainable params: 0\n","_________________________________________________________________\n","None\n"],"name":"stdout"}]},{"cell_type":"code","metadata":{"id":"huXWd0wUHawo","executionInfo":{"status":"ok","timestamp":1603293663628,"user_tz":300,"elapsed":29636,"user":{"displayName":"Qusai Amer","photoUrl":"https://lh6.googleusercontent.com/-jAP82gBhj-8/AAAAAAAAAAI/AAAAAAAAA9Y/SV0jzmWT_-E/s64/photo.jpg","userId":"00843738786401489735"}},"outputId":"f224b19e-2214-4c57-a62f-e123a974f3f9","colab":{"base_uri":"https://localhost:8080/","height":581}},"source":["import time\n","start = time.time()\n","\n","# Compile model\n","model.compile(optimizer='sgd', loss='categorical_crossentropy',metrics=['accuracy'],)\n","\n","# Flatten the images into vectors (1D) for feed forward network\n","flatten_imgs_train = imgs_train_norm.reshape((-1, 48*48))\n","flatten_imgs_val = imgs_val_norm.reshape((-1, 48*48))\n","print(labels_train)\n","\n","# Train model\n","val = (flatten_imgs_val,to_categorical(labels_val))\n","history = model.fit(flatten_imgs_train, to_categorical(labels_train), epochs=15, batch_size=100,validation_data=val)\n","end = time.time()\n","elapsed = end - start\n","print(f\"The running tine is {round(elapsed,1)} sec\")"],"execution_count":33,"outputs":[{"output_type":"stream","text":["[0 0 2 ... 4 0 4]\n","Epoch 1/15\n","288/288 [==============================] - 2s 7ms/step - loss: 1.7895 - accuracy: 0.2605 - val_loss: 1.7282 - val_accuracy: 0.3171\n","Epoch 2/15\n","288/288 [==============================] - 2s 6ms/step - loss: 1.7107 - accuracy: 0.3200 - val_loss: 1.6780 - val_accuracy: 0.3583\n","Epoch 3/15\n","288/288 [==============================] - 2s 6ms/step - loss: 1.6675 - accuracy: 0.3481 - val_loss: 1.6475 - val_accuracy: 0.3628\n","Epoch 4/15\n","288/288 [==============================] - 2s 6ms/step - loss: 1.6349 - accuracy: 0.3673 - val_loss: 1.6219 - val_accuracy: 0.3890\n","Epoch 5/15\n","288/288 [==============================] - 2s 7ms/step - loss: 1.6109 - accuracy: 0.3780 - val_loss: 1.6090 - val_accuracy: 0.3892\n","Epoch 6/15\n","288/288 [==============================] - 2s 7ms/step - loss: 1.5908 - accuracy: 0.3871 - val_loss: 1.5969 - val_accuracy: 0.3962\n","Epoch 7/15\n","288/288 [==============================] - 2s 7ms/step - loss: 1.5737 - accuracy: 0.3953 - val_loss: 1.5876 - val_accuracy: 0.3982\n","Epoch 8/15\n","288/288 [==============================] - 2s 6ms/step - loss: 1.5583 - accuracy: 0.4037 - val_loss: 1.5804 - val_accuracy: 0.3987\n","Epoch 9/15\n","288/288 [==============================] - 2s 6ms/step - loss: 1.5453 - accuracy: 0.4089 - val_loss: 1.5758 - val_accuracy: 0.4040\n","Epoch 10/15\n","288/288 [==============================] - 2s 6ms/step - loss: 1.5314 - accuracy: 0.4161 - val_loss: 1.5671 - val_accuracy: 0.4096\n","Epoch 11/15\n","288/288 [==============================] - 2s 6ms/step - loss: 1.5151 - accuracy: 0.4251 - val_loss: 1.5611 - val_accuracy: 0.4168\n","Epoch 12/15\n","288/288 [==============================] - 2s 6ms/step - loss: 1.5028 - accuracy: 0.4288 - val_loss: 1.5539 - val_accuracy: 0.4126\n","Epoch 13/15\n","288/288 [==============================] - 2s 6ms/step - loss: 1.4900 - accuracy: 0.4364 - val_loss: 1.5507 - val_accuracy: 0.4085\n","Epoch 14/15\n","288/288 [==============================] - 2s 6ms/step - loss: 1.4770 - accuracy: 0.4407 - val_loss: 1.5439 - val_accuracy: 0.4099\n","Epoch 15/15\n","288/288 [==============================] - 2s 6ms/step - loss: 1.4644 - accuracy: 0.4471 - val_loss: 1.5399 - val_accuracy: 0.4138\n","The running tine is 28.7 sec\n"],"name":"stdout"}]},{"cell_type":"code","metadata":{"id":"UkRyBGAyHa8o","executionInfo":{"status":"ok","timestamp":1603293670035,"user_tz":300,"elapsed":1051,"user":{"displayName":"Qusai Amer","photoUrl":"https://lh6.googleusercontent.com/-jAP82gBhj-8/AAAAAAAAAAI/AAAAAAAAA9Y/SV0jzmWT_-E/s64/photo.jpg","userId":"00843738786401489735"}},"outputId":"f61d2ed3-5285-4edd-8875-4b2f4399a1a6","colab":{"base_uri":"https://localhost:8080/","height":34}},"source":["# Evaluate your model's performance on the val data\n","flatten_imgs_test = imgs_test_norm.reshape((-1, 48*48))\n","\n","\n","performance = model.evaluate(flatten_imgs_val, to_categorical(labels_val))"],"execution_count":34,"outputs":[{"output_type":"stream","text":["113/113 [==============================] - 0s 4ms/step - loss: 1.5399 - accuracy: 0.4138\n"],"name":"stdout"}]},{"cell_type":"code","metadata":{"id":"hQuYhwLMHxPV","executionInfo":{"status":"ok","timestamp":1603293674377,"user_tz":300,"elapsed":1015,"user":{"displayName":"Qusai Amer","photoUrl":"https://lh6.googleusercontent.com/-jAP82gBhj-8/AAAAAAAAAAI/AAAAAAAAA9Y/SV0jzmWT_-E/s64/photo.jpg","userId":"00843738786401489735"}},"outputId":"c5679c28-0362-47f0-c59f-369b7c4a1a0b","colab":{"base_uri":"https://localhost:8080/","height":295}},"source":["plt.plot(history.history['loss'])\n","# plt.plot(history.history['accuracy'])\n","\n","plt.plot(history.history['val_loss'])\n","plt.title('model loss')\n","plt.ylabel('loss')\n","plt.xlabel('epoch')\n","plt.legend(['train', 'val'], loc='upper left')\n","plt.show()"],"execution_count":35,"outputs":[{"output_type":"display_data","data":{"image/png":"\n","text/plain":["<Figure size 432x288 with 1 Axes>"]},"metadata":{"tags":[],"needs_background":"light"}}]},{"cell_type":"markdown","metadata":{"id":"BTyEeRdxRgVa"},"source":["#### **(cii) Run the best model that was found based on the validation set from question (c.i) on the testing set. Report the emotion classification accuracy on the testing set.**"]},{"cell_type":"code","metadata":{"id":"IRrBZjrgRgVb","executionInfo":{"status":"ok","timestamp":1603293684331,"user_tz":300,"elapsed":919,"user":{"displayName":"Qusai Amer","photoUrl":"https://lh6.googleusercontent.com/-jAP82gBhj-8/AAAAAAAAAAI/AAAAAAAAA9Y/SV0jzmWT_-E/s64/photo.jpg","userId":"00843738786401489735"}},"outputId":"2887703c-66aa-4d8d-f8b6-85676316f4f5","colab":{"base_uri":"https://localhost:8080/","height":34}},"source":["# Evaluate your model's performance on the test dataset\n","flatten_imgs_test = imgs_test_norm.reshape((-1, 48*48))\n","\n","performance = model.evaluate(flatten_imgs_test, to_categorical(labels_test))"],"execution_count":36,"outputs":[{"output_type":"stream","text":["113/113 [==============================] - 0s 4ms/step - loss: 1.5327 - accuracy: 0.4174\n"],"name":"stdout"}]},{"cell_type":"markdown","metadata":{"id":"daadw0XrRgVf"},"source":["### **(d) Image classification with CNNs: In this part, you will use a convolutional neural network (CNN) to perform the emotion classification task.**"]},{"cell_type":"markdown","metadata":{"id":"nrcv6iKz05wC"},"source":["CNN Combination One"]},{"cell_type":"code","metadata":{"id":"YClpGdoYRgVg","executionInfo":{"status":"ok","timestamp":1603297065761,"user_tz":300,"elapsed":136513,"user":{"displayName":"Qusai Amer","photoUrl":"https://lh6.googleusercontent.com/-jAP82gBhj-8/AAAAAAAAAAI/AAAAAAAAA9Y/SV0jzmWT_-E/s64/photo.jpg","userId":"00843738786401489735"}},"outputId":"ef8c4dc0-cefc-4a9f-b501-87d99a865c8b","colab":{"base_uri":"https://localhost:8080/","height":1227}},"source":["start = time.time()\n","from keras.layers import Conv2D, Flatten, MaxPooling2D\n","\n","\n","# Define 2 groups of layers: features layer (convolutions) and classification layer\n","common_features = [Conv2D(64, kernel_size=2, activation='relu', input_shape=(48,48,1)), \n","            MaxPooling2D(pool_size=(2,2)),\n","            Conv2D(64, kernel_size=2, activation='relu'), Dropout(0.25),\n","            Conv2D(64, kernel_size=2, activation='relu'), Dropout(0.25),\n","            MaxPooling2D(pool_size=(2,2)), Flatten(),]\n","# classifier = [Dense(2304//5, activation='relu'), Dense(7, activation='softmax'),]\n","classifier = [Dense(7, activation='softmax'),]\n","\n","\n","cnn_model = Sequential(common_features+classifier)\n","\n","print(cnn_model.summary())  # Compare number of parameteres against FFN\n","\n","\n","cnn_model.compile(optimizer='adam', loss='categorical_crossentropy',metrics=['accuracy'],)\n","\n","train_images_3d = imgs_train.reshape(28709,48,48,1)\n","val_images_3d = imgs_val.reshape(3589,48,48,1)\n","test_images_3d = imgs_test.reshape(3589,48,48,1)\n","\n","\n","val = (val_images_3d,to_categorical(labels_val))\n","history = cnn_model.fit(train_images_3d, to_categorical(labels_train), epochs=20, batch_size=500,validation_data=val,)\n","performance = cnn_model.evaluate(val_images_3d, to_categorical(labels_val))\n","\n","print(f\"The acc of validation set is :{performance[1]}\")\n","end = time.time()\n","elipsed2 = end - start\n","print(f\"The running time is {round(elapsed2,1)} sec\")\n"],"execution_count":53,"outputs":[{"output_type":"stream","text":["Model: \"sequential_10\"\n","_________________________________________________________________\n","Layer (type)                 Output Shape              Param #   \n","=================================================================\n","conv2d_17 (Conv2D)           (None, 47, 47, 64)        320       \n","_________________________________________________________________\n","max_pooling2d_14 (MaxPooling (None, 23, 23, 64)        0         \n","_________________________________________________________________\n","conv2d_18 (Conv2D)           (None, 22, 22, 64)        16448     \n","_________________________________________________________________\n","dropout_11 (Dropout)         (None, 22, 22, 64)        0         \n","_________________________________________________________________\n","conv2d_19 (Conv2D)           (None, 21, 21, 64)        16448     \n","_________________________________________________________________\n","dropout_12 (Dropout)         (None, 21, 21, 64)        0         \n","_________________________________________________________________\n","max_pooling2d_15 (MaxPooling (None, 10, 10, 64)        0         \n","_________________________________________________________________\n","flatten_7 (Flatten)          (None, 6400)              0         \n","_________________________________________________________________\n","dense_17 (Dense)             (None, 7)                 44807     \n","=================================================================\n","Total params: 78,023\n","Trainable params: 78,023\n","Non-trainable params: 0\n","_________________________________________________________________\n","None\n","Epoch 1/20\n","58/58 [==============================] - 7s 118ms/step - loss: 8.4865 - accuracy: 0.1936 - val_loss: 1.8561 - val_accuracy: 0.2184\n","Epoch 2/20\n","58/58 [==============================] - 7s 115ms/step - loss: 1.7869 - accuracy: 0.2834 - val_loss: 1.6909 - val_accuracy: 0.3416\n","Epoch 3/20\n","58/58 [==============================] - 7s 115ms/step - loss: 1.6541 - accuracy: 0.3562 - val_loss: 1.6101 - val_accuracy: 0.3873\n","Epoch 4/20\n","58/58 [==============================] - 7s 115ms/step - loss: 1.5842 - accuracy: 0.3919 - val_loss: 1.5657 - val_accuracy: 0.4054\n","Epoch 5/20\n","58/58 [==============================] - 7s 115ms/step - loss: 1.5236 - accuracy: 0.4149 - val_loss: 1.5194 - val_accuracy: 0.4285\n","Epoch 6/20\n","58/58 [==============================] - 7s 115ms/step - loss: 1.4950 - accuracy: 0.4259 - val_loss: 1.4969 - val_accuracy: 0.4333\n","Epoch 7/20\n","58/58 [==============================] - 7s 115ms/step - loss: 1.4572 - accuracy: 0.4455 - val_loss: 1.4725 - val_accuracy: 0.4466\n","Epoch 8/20\n","58/58 [==============================] - 7s 114ms/step - loss: 1.4474 - accuracy: 0.4490 - val_loss: 1.4460 - val_accuracy: 0.4539\n","Epoch 9/20\n","58/58 [==============================] - 7s 115ms/step - loss: 1.4192 - accuracy: 0.4630 - val_loss: 1.4706 - val_accuracy: 0.4372\n","Epoch 10/20\n","58/58 [==============================] - 7s 115ms/step - loss: 1.4139 - accuracy: 0.4642 - val_loss: 1.4194 - val_accuracy: 0.4586\n","Epoch 11/20\n","58/58 [==============================] - 7s 114ms/step - loss: 1.3989 - accuracy: 0.4711 - val_loss: 1.4282 - val_accuracy: 0.4603\n","Epoch 12/20\n","58/58 [==============================] - 7s 115ms/step - loss: 1.3742 - accuracy: 0.4801 - val_loss: 1.4116 - val_accuracy: 0.4617\n","Epoch 13/20\n","58/58 [==============================] - 7s 115ms/step - loss: 1.3707 - accuracy: 0.4830 - val_loss: 1.3948 - val_accuracy: 0.4790\n","Epoch 14/20\n","58/58 [==============================] - 7s 114ms/step - loss: 1.3598 - accuracy: 0.4843 - val_loss: 1.4226 - val_accuracy: 0.4639\n","Epoch 15/20\n","58/58 [==============================] - 7s 115ms/step - loss: 1.3463 - accuracy: 0.4889 - val_loss: 1.3853 - val_accuracy: 0.4778\n","Epoch 16/20\n","58/58 [==============================] - 7s 115ms/step - loss: 1.3323 - accuracy: 0.4970 - val_loss: 1.3791 - val_accuracy: 0.4843\n","Epoch 17/20\n","58/58 [==============================] - 7s 114ms/step - loss: 1.3219 - accuracy: 0.5019 - val_loss: 1.3815 - val_accuracy: 0.4826\n","Epoch 18/20\n","58/58 [==============================] - 7s 114ms/step - loss: 1.3249 - accuracy: 0.5007 - val_loss: 1.3798 - val_accuracy: 0.4854\n","Epoch 19/20\n","58/58 [==============================] - 7s 115ms/step - loss: 1.3034 - accuracy: 0.5099 - val_loss: 1.3804 - val_accuracy: 0.4843\n","Epoch 20/20\n","58/58 [==============================] - 7s 114ms/step - loss: 1.2984 - accuracy: 0.5093 - val_loss: 1.3648 - val_accuracy: 0.4965\n","113/113 [==============================] - 1s 5ms/step - loss: 1.3648 - accuracy: 0.4965\n","The acc of validation set is :0.4965171217918396\n","The running time is 28.7 sec\n"],"name":"stdout"}]},{"cell_type":"code","metadata":{"id":"GVmK9WJI5gMc","executionInfo":{"status":"ok","timestamp":1603297667961,"user_tz":300,"elapsed":884,"user":{"displayName":"Qusai Amer","photoUrl":"https://lh6.googleusercontent.com/-jAP82gBhj-8/AAAAAAAAAAI/AAAAAAAAA9Y/SV0jzmWT_-E/s64/photo.jpg","userId":"00843738786401489735"}},"outputId":"ba67e212-3eef-4785-c921-7a1132b581b0","colab":{"base_uri":"https://localhost:8080/","height":295}},"source":["plt.plot(history.history['loss'])\n","# plt.plot(history.history['accuracy'])\n","\n","plt.plot(history.history['val_loss'])\n","plt.axis([2.5, 20,1,2])\n","\n","plt.title('model loss')\n","plt.ylabel('loss')\n","plt.xlabel('epoch')\n","plt.legend(['train', 'val'], loc='upper left')\n","plt.show()"],"execution_count":62,"outputs":[{"output_type":"display_data","data":{"image/png":"\n","text/plain":["<Figure size 432x288 with 1 Axes>"]},"metadata":{"tags":[],"needs_background":"light"}}]},{"cell_type":"markdown","metadata":{"id":"tqEqKaIPmR5j"},"source":["CNN Combination Two"]},{"cell_type":"code","metadata":{"id":"feAU96bLmUEB","executionInfo":{"status":"ok","timestamp":1603298415215,"user_tz":300,"elapsed":46909,"user":{"displayName":"Qusai Amer","photoUrl":"https://lh6.googleusercontent.com/-jAP82gBhj-8/AAAAAAAAAAI/AAAAAAAAA9Y/SV0jzmWT_-E/s64/photo.jpg","userId":"00843738786401489735"}},"outputId":"857c98c5-96e3-4d92-fa02-713b635e6403","colab":{"base_uri":"https://localhost:8080/","height":989}},"source":["start = time.time()\n","from keras.layers import Conv2D, Flatten, MaxPooling2D\n","\n","\n","# Define 2 groups of layers: features layer (convolutions) and classification layer\n","common_features = [Conv2D(32, kernel_size=2, activation='relu', input_shape=(48,48,1)), \n","            MaxPooling2D(pool_size=(2,2)),\n","            Conv2D(32, kernel_size=2, activation='relu'), Dropout(0.25),\n","            Conv2D(64, kernel_size=2, activation='relu'), Dropout(0.25),\n","            MaxPooling2D(pool_size=(2,2)),\n","            Conv2D(64, kernel_size=2, activation='relu'), Dropout(0.25),\n","            MaxPooling2D(pool_size=(2,2)), Flatten(),]\n","# classifier = [Dense(2304//5, activation='relu'), Dense(7, activation='softmax'),]\n","classifier = [Dense(7, activation='softmax'),]\n","\n","cnn_model = Sequential(common_features+classifier)\n","\n","print(cnn_model.summary())  # Compare number of parameteres against FFN\n","\n","\n","cnn_model.compile(optimizer='adam', loss='categorical_crossentropy',metrics=['accuracy'],)\n","\n","train_images_3d = imgs_train.reshape(28709,48,48,1)\n","val_images_3d = imgs_val.reshape(3589,48,48,1)\n","test_images_3d = imgs_test.reshape(3589,48,48,1)\n","\n","\n","val = (val_images_3d,to_categorical(labels_val))\n","history = cnn_model.fit(train_images_3d, to_categorical(labels_train), epochs=10, batch_size=200,validation_data=val,)\n","performance = cnn_model.evaluate(val_images_3d, to_categorical(labels_val))\n","\n","print(f\"The acc of validation set is :{performance[1]}\")\n","end = time.time()\n","elipsed2 = end - start\n","print(f\"The running time is {round(elipsed2,1)} sec\")"],"execution_count":69,"outputs":[{"output_type":"stream","text":["Model: \"sequential_14\"\n","_________________________________________________________________\n","Layer (type)                 Output Shape              Param #   \n","=================================================================\n","conv2d_32 (Conv2D)           (None, 47, 47, 32)        160       \n","_________________________________________________________________\n","max_pooling2d_25 (MaxPooling (None, 23, 23, 32)        0         \n","_________________________________________________________________\n","conv2d_33 (Conv2D)           (None, 22, 22, 32)        4128      \n","_________________________________________________________________\n","dropout_22 (Dropout)         (None, 22, 22, 32)        0         \n","_________________________________________________________________\n","conv2d_34 (Conv2D)           (None, 21, 21, 64)        8256      \n","_________________________________________________________________\n","dropout_23 (Dropout)         (None, 21, 21, 64)        0         \n","_________________________________________________________________\n","max_pooling2d_26 (MaxPooling (None, 10, 10, 64)        0         \n","_________________________________________________________________\n","conv2d_35 (Conv2D)           (None, 9, 9, 64)          16448     \n","_________________________________________________________________\n","dropout_24 (Dropout)         (None, 9, 9, 64)          0         \n","_________________________________________________________________\n","max_pooling2d_27 (MaxPooling (None, 4, 4, 64)          0         \n","_________________________________________________________________\n","flatten_11 (Flatten)         (None, 1024)              0         \n","_________________________________________________________________\n","dense_21 (Dense)             (None, 7)                 7175      \n","=================================================================\n","Total params: 36,167\n","Trainable params: 36,167\n","Non-trainable params: 0\n","_________________________________________________________________\n","None\n","Epoch 1/10\n","144/144 [==============================] - 5s 32ms/step - loss: 3.2152 - accuracy: 0.2281 - val_loss: 1.7845 - val_accuracy: 0.2784\n","Epoch 2/10\n","144/144 [==============================] - 4s 30ms/step - loss: 1.7431 - accuracy: 0.3063 - val_loss: 1.7016 - val_accuracy: 0.3419\n","Epoch 3/10\n","144/144 [==============================] - 4s 30ms/step - loss: 1.6841 - accuracy: 0.3389 - val_loss: 1.6629 - val_accuracy: 0.3644\n","Epoch 4/10\n","144/144 [==============================] - 4s 30ms/step - loss: 1.6433 - accuracy: 0.3568 - val_loss: 1.6341 - val_accuracy: 0.3742\n","Epoch 5/10\n","144/144 [==============================] - 4s 30ms/step - loss: 1.6125 - accuracy: 0.3727 - val_loss: 1.6141 - val_accuracy: 0.3918\n","Epoch 6/10\n","144/144 [==============================] - 4s 30ms/step - loss: 1.5879 - accuracy: 0.3871 - val_loss: 1.5908 - val_accuracy: 0.4171\n","Epoch 7/10\n","144/144 [==============================] - 4s 30ms/step - loss: 1.5571 - accuracy: 0.3963 - val_loss: 1.5665 - val_accuracy: 0.4118\n","Epoch 8/10\n","144/144 [==============================] - 4s 31ms/step - loss: 1.5443 - accuracy: 0.4028 - val_loss: 1.5406 - val_accuracy: 0.4372\n","Epoch 9/10\n","144/144 [==============================] - 4s 31ms/step - loss: 1.5276 - accuracy: 0.4117 - val_loss: 1.5525 - val_accuracy: 0.4458\n","Epoch 10/10\n","144/144 [==============================] - 4s 31ms/step - loss: 1.5137 - accuracy: 0.4172 - val_loss: 1.5051 - val_accuracy: 0.4397\n","113/113 [==============================] - 0s 4ms/step - loss: 1.5051 - accuracy: 0.4397\n","The acc of validation set is :0.43967679142951965\n","The running time is 45.9 sec\n"],"name":"stdout"}]},{"cell_type":"code","metadata":{"id":"_Jq68_cKAkpR","executionInfo":{"status":"ok","timestamp":1603298215642,"user_tz":300,"elapsed":800,"user":{"displayName":"Qusai Amer","photoUrl":"https://lh6.googleusercontent.com/-jAP82gBhj-8/AAAAAAAAAAI/AAAAAAAAA9Y/SV0jzmWT_-E/s64/photo.jpg","userId":"00843738786401489735"}},"outputId":"d0cd0a1a-1602-4e42-daa8-7a9020718b9c","colab":{"base_uri":"https://localhost:8080/","height":295}},"source":["plt.plot(history.history['loss'])\n","# plt.plot(history.history['accuracy'])\n","\n","plt.plot(history.history['val_loss'])\n","plt.axis([2.5, 10,1,2])\n","\n","plt.title('model loss')\n","plt.ylabel('loss')\n","plt.xlabel('epoch')\n","plt.legend(['train', 'val'], loc='upper left')\n","plt.show()"],"execution_count":66,"outputs":[{"output_type":"display_data","data":{"image/png":"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\n","text/plain":["<Figure size 432x288 with 1 Axes>"]},"metadata":{"tags":[],"needs_background":"light"}}]},{"cell_type":"markdown","metadata":{"id":"5jfI5GSlpY7G"},"source":["CNN Combination Three"]},{"cell_type":"code","metadata":{"id":"8xXIHVuIpZRp","executionInfo":{"status":"ok","timestamp":1603327179057,"user_tz":300,"elapsed":47506,"user":{"displayName":"Qusai Amer","photoUrl":"https://lh6.googleusercontent.com/-jAP82gBhj-8/AAAAAAAAAAI/AAAAAAAAA9Y/SV0jzmWT_-E/s64/photo.jpg","userId":"00843738786401489735"}},"outputId":"c33deb8e-3912-48db-94b3-ceab448a0a07","colab":{"base_uri":"https://localhost:8080/","height":921}},"source":["start = time.time()\n","from keras.layers import Conv2D, Flatten, MaxPooling2D\n","\n","\n","# Define 2 groups of layers: features layer (convolutions) and classification layer\n","common_features = [Conv2D(64, kernel_size=3, activation='relu', input_shape=(48,48,1)), \n","            MaxPooling2D(pool_size=(2,2)),\n","            Conv2D(64, kernel_size=3, activation='relu'), Dropout(0.25),\n","            Conv2D(64, kernel_size=3, activation='relu'), Dropout(0.25),\n","            MaxPooling2D(pool_size=(2,2)), Flatten(),]\n","classifier = [Dense(2304//4, activation='relu'),Dense(7, activation='softmax'),]\n","\n","cnn_model = Sequential(common_features+classifier)\n","\n","print(cnn_model.summary())  # Compare number of parameteres against FFN\n","\n","\n","cnn_model.compile(optimizer='adam', loss='categorical_crossentropy',metrics=['accuracy'],)\n","\n","train_images_3d = imgs_train.reshape(28709,48,48,1)\n","val_images_3d = imgs_val.reshape(3589,48,48,1)\n","test_images_3d = imgs_test.reshape(3589,48,48,1)\n","\n","\n","val = (val_images_3d,to_categorical(labels_val))\n","history = cnn_model.fit(train_images_3d, to_categorical(labels_train), epochs=10, batch_size=200,validation_data=val,)\n","performance = cnn_model.evaluate(val_images_3d, to_categorical(labels_val))\n","\n","print(f\"The acc of validation set is :{performance[1]}\")\n","end = time.time()\n","elipsed2 = end - start\n","print(f\"The running time is {round(elipsed2,1)} sec\")"],"execution_count":17,"outputs":[{"output_type":"stream","text":["Model: \"sequential_1\"\n","_________________________________________________________________\n","Layer (type)                 Output Shape              Param #   \n","=================================================================\n","conv2d (Conv2D)              (None, 46, 46, 64)        640       \n","_________________________________________________________________\n","max_pooling2d (MaxPooling2D) (None, 23, 23, 64)        0         \n","_________________________________________________________________\n","conv2d_1 (Conv2D)            (None, 21, 21, 64)        36928     \n","_________________________________________________________________\n","dropout (Dropout)            (None, 21, 21, 64)        0         \n","_________________________________________________________________\n","conv2d_2 (Conv2D)            (None, 19, 19, 64)        36928     \n","_________________________________________________________________\n","dropout_1 (Dropout)          (None, 19, 19, 64)        0         \n","_________________________________________________________________\n","max_pooling2d_1 (MaxPooling2 (None, 9, 9, 64)          0         \n","_________________________________________________________________\n","flatten (Flatten)            (None, 5184)              0         \n","_________________________________________________________________\n","dense_1 (Dense)              (None, 576)               2986560   \n","_________________________________________________________________\n","dense_2 (Dense)              (None, 7)                 4039      \n","=================================================================\n","Total params: 3,065,095\n","Trainable params: 3,065,095\n","Non-trainable params: 0\n","_________________________________________________________________\n","None\n","Epoch 1/10\n","144/144 [==============================] - 4s 30ms/step - loss: 8.2038 - accuracy: 0.2328 - val_loss: 1.8933 - val_accuracy: 0.2530\n","Epoch 2/10\n","144/144 [==============================] - 4s 28ms/step - loss: 1.7281 - accuracy: 0.3085 - val_loss: 1.6399 - val_accuracy: 0.3767\n","Epoch 3/10\n","144/144 [==============================] - 4s 28ms/step - loss: 1.5733 - accuracy: 0.3928 - val_loss: 1.5087 - val_accuracy: 0.4232\n","Epoch 4/10\n","144/144 [==============================] - 4s 28ms/step - loss: 1.4684 - accuracy: 0.4333 - val_loss: 1.4271 - val_accuracy: 0.4564\n","Epoch 5/10\n","144/144 [==============================] - 4s 28ms/step - loss: 1.3830 - accuracy: 0.4688 - val_loss: 1.3850 - val_accuracy: 0.4698\n","Epoch 6/10\n","144/144 [==============================] - 4s 28ms/step - loss: 1.2958 - accuracy: 0.5066 - val_loss: 1.3404 - val_accuracy: 0.4843\n","Epoch 7/10\n","144/144 [==============================] - 4s 28ms/step - loss: 1.2205 - accuracy: 0.5354 - val_loss: 1.3176 - val_accuracy: 0.5001\n","Epoch 8/10\n","144/144 [==============================] - 4s 28ms/step - loss: 1.1442 - accuracy: 0.5695 - val_loss: 1.2969 - val_accuracy: 0.5166\n","Epoch 9/10\n","144/144 [==============================] - 4s 28ms/step - loss: 1.0573 - accuracy: 0.6044 - val_loss: 1.2989 - val_accuracy: 0.5071\n","Epoch 10/10\n","144/144 [==============================] - 4s 28ms/step - loss: 0.9759 - accuracy: 0.6401 - val_loss: 1.3275 - val_accuracy: 0.4996\n","113/113 [==============================] - 0s 4ms/step - loss: 1.3275 - accuracy: 0.4996\n","The acc of validation set is :0.49958205223083496\n","The running time is 47.3 sec\n"],"name":"stdout"}]},{"cell_type":"code","metadata":{"id":"OBH7n3Y5DBnJ","executionInfo":{"status":"ok","timestamp":1603327179215,"user_tz":300,"elapsed":46648,"user":{"displayName":"Qusai Amer","photoUrl":"https://lh6.googleusercontent.com/-jAP82gBhj-8/AAAAAAAAAAI/AAAAAAAAA9Y/SV0jzmWT_-E/s64/photo.jpg","userId":"00843738786401489735"}},"outputId":"b0e5dec9-0a08-4d96-de17-326d4cacf939","colab":{"base_uri":"https://localhost:8080/","height":295}},"source":["plt.plot(history.history['loss'])\n","# plt.plot(history.history['accuracy'])\n","\n","plt.plot(history.history['val_loss'])\n","plt.axis([1, 10,1,2])\n","\n","plt.title('model loss')\n","plt.ylabel('loss')\n","plt.xlabel('epoch')\n","plt.legend(['train', 'val'], loc='upper left')\n","plt.show()"],"execution_count":18,"outputs":[{"output_type":"display_data","data":{"image/png":"\n","text/plain":["<Figure size 432x288 with 1 Axes>"]},"metadata":{"tags":[],"needs_background":"light"}}]},{"cell_type":"markdown","metadata":{"id":"la1yiZiGDFYx"},"source":["CNN Combination Four"]},{"cell_type":"code","metadata":{"id":"wGbgzUhdqRsM","executionInfo":{"status":"ok","timestamp":1603300148102,"user_tz":300,"elapsed":91539,"user":{"displayName":"Qusai Amer","photoUrl":"https://lh6.googleusercontent.com/-jAP82gBhj-8/AAAAAAAAAAI/AAAAAAAAA9Y/SV0jzmWT_-E/s64/photo.jpg","userId":"00843738786401489735"}},"outputId":"abb2a191-3e17-48e5-f59b-95235a8e39ed","colab":{"base_uri":"https://localhost:8080/","height":921}},"source":["start = time.time()\n","from keras.layers import Conv2D, Flatten, MaxPooling2D\n","\n","\n","# Define 2 groups of layers: features layer (convolutions) and classification layer\n","common_features = [Conv2D(64, kernel_size=3, activation='relu', input_shape=(48,48,1)), \n","            MaxPooling2D(pool_size=(2,2)),\n","            Conv2D(64, kernel_size=3, activation='relu'), Dropout(0.25),\n","            Conv2D(64, kernel_size=3, activation='relu'), Dropout(0.25),\n","            MaxPooling2D(pool_size=(2,2)), Flatten(),]\n","classifier = [Dense(2304//4, activation='relu'),Dense(7, activation='softmax'),]\n","\n","cnn_model = Sequential(common_features+classifier)\n","\n","print(cnn_model.summary())  # Compare number of parameteres against FFN\n","\n","\n","cnn_model.compile(optimizer='adam', loss='categorical_crossentropy',metrics=['accuracy'],)\n","\n","train_images_3d = imgs_train.reshape(28709,48,48,1)\n","val_images_3d = imgs_val.reshape(3589,48,48,1)\n","test_images_3d = imgs_test.reshape(3589,48,48,1)\n","\n","\n","val = (val_images_3d,to_categorical(labels_val))\n","history = cnn_model.fit(train_images_3d, to_categorical(labels_train), epochs=10, batch_size=100,validation_data=val,)\n","performance = cnn_model.evaluate(val_images_3d, to_categorical(labels_val))\n","\n","print(f\"The acc of validation set is :{performance[1]}\")\n","end = time.time()\n","elipsed2 = end - start\n","print(f\"The running time is {round(elipsed2,1)} sec\")"],"execution_count":86,"outputs":[{"output_type":"stream","text":["Model: \"sequential_19\"\n","_________________________________________________________________\n","Layer (type)                 Output Shape              Param #   \n","=================================================================\n","conv2d_49 (Conv2D)           (None, 46, 46, 64)        640       \n","_________________________________________________________________\n","max_pooling2d_37 (MaxPooling (None, 23, 23, 64)        0         \n","_________________________________________________________________\n","conv2d_50 (Conv2D)           (None, 21, 21, 64)        36928     \n","_________________________________________________________________\n","dropout_32 (Dropout)         (None, 21, 21, 64)        0         \n","_________________________________________________________________\n","conv2d_51 (Conv2D)           (None, 19, 19, 64)        36928     \n","_________________________________________________________________\n","dropout_33 (Dropout)         (None, 19, 19, 64)        0         \n","_________________________________________________________________\n","max_pooling2d_38 (MaxPooling (None, 9, 9, 64)          0         \n","_________________________________________________________________\n","flatten_16 (Flatten)         (None, 5184)              0         \n","_________________________________________________________________\n","dense_29 (Dense)             (None, 576)               2986560   \n","_________________________________________________________________\n","dense_30 (Dense)             (None, 7)                 4039      \n","=================================================================\n","Total params: 3,065,095\n","Trainable params: 3,065,095\n","Non-trainable params: 0\n","_________________________________________________________________\n","None\n","Epoch 1/10\n","288/288 [==============================] - 9s 32ms/step - loss: 4.2178 - accuracy: 0.2362 - val_loss: 1.8113 - val_accuracy: 0.2494\n","Epoch 2/10\n","288/288 [==============================] - 9s 31ms/step - loss: 1.8091 - accuracy: 0.2522 - val_loss: 1.8108 - val_accuracy: 0.2505\n","Epoch 3/10\n","288/288 [==============================] - 9s 31ms/step - loss: 1.8036 - accuracy: 0.2556 - val_loss: 1.7908 - val_accuracy: 0.2622\n","Epoch 4/10\n","288/288 [==============================] - 9s 31ms/step - loss: 1.7383 - accuracy: 0.2967 - val_loss: 1.6526 - val_accuracy: 0.3555\n","Epoch 5/10\n","288/288 [==============================] - 9s 31ms/step - loss: 1.6364 - accuracy: 0.3532 - val_loss: 1.5825 - val_accuracy: 0.3996\n","Epoch 6/10\n","288/288 [==============================] - 9s 31ms/step - loss: 1.5270 - accuracy: 0.4057 - val_loss: 1.4891 - val_accuracy: 0.4255\n","Epoch 7/10\n","288/288 [==============================] - 9s 31ms/step - loss: 1.4324 - accuracy: 0.4526 - val_loss: 1.4327 - val_accuracy: 0.4478\n","Epoch 8/10\n","288/288 [==============================] - 9s 31ms/step - loss: 1.3124 - accuracy: 0.4992 - val_loss: 1.3677 - val_accuracy: 0.4912\n","Epoch 9/10\n","288/288 [==============================] - 9s 31ms/step - loss: 1.2209 - accuracy: 0.5385 - val_loss: 1.3521 - val_accuracy: 0.4929\n","Epoch 10/10\n","288/288 [==============================] - 9s 31ms/step - loss: 1.1036 - accuracy: 0.5904 - val_loss: 1.3209 - val_accuracy: 0.5143\n","113/113 [==============================] - 1s 6ms/step - loss: 1.3209 - accuracy: 0.5143\n","The acc of validation set is :0.5143494009971619\n","The running time is 90.9 sec\n"],"name":"stdout"}]},{"cell_type":"code","metadata":{"id":"9lob0A5vDJqG","executionInfo":{"status":"ok","timestamp":1603300162326,"user_tz":300,"elapsed":1125,"user":{"displayName":"Qusai Amer","photoUrl":"https://lh6.googleusercontent.com/-jAP82gBhj-8/AAAAAAAAAAI/AAAAAAAAA9Y/SV0jzmWT_-E/s64/photo.jpg","userId":"00843738786401489735"}},"outputId":"a45e42b6-bd39-471c-d310-191259fd9f33","colab":{"base_uri":"https://localhost:8080/","height":295}},"source":["plt.plot(history.history['loss'])\n","# plt.plot(history.history['accuracy'])\n","\n","plt.plot(history.history['val_loss'])\n","plt.axis([2.5, 10,1,2])\n","\n","plt.title('model loss')\n","plt.ylabel('loss')\n","plt.xlabel('epoch')\n","plt.legend(['train', 'val'], loc='upper left')\n","plt.show()"],"execution_count":89,"outputs":[{"output_type":"display_data","data":{"image/png":"\n","text/plain":["<Figure size 432x288 with 1 Axes>"]},"metadata":{"tags":[],"needs_background":"light"}}]},{"cell_type":"markdown","metadata":{"id":"BYVUsOabDPqn"},"source":["**(dii) Run the best model that was found based on the validation set from question (d.i) on the testing set**"]},{"cell_type":"code","metadata":{"id":"2HnuZGMZzzq2","executionInfo":{"status":"ok","timestamp":1603076661336,"user_tz":300,"elapsed":1005,"user":{"displayName":"Qusai Amer","photoUrl":"https://lh6.googleusercontent.com/-jAP82gBhj-8/AAAAAAAAAAI/AAAAAAAAA9Y/SV0jzmWT_-E/s64/photo.jpg","userId":"00843738786401489735"}},"outputId":"32efd7c4-94ee-4db4-9559-709257f43bbc","colab":{"base_uri":"https://localhost:8080/","height":34}},"source":["performance = cnn_model.evaluate(test_images_3d, to_categorical(labels_test))\n"],"execution_count":null,"outputs":[{"output_type":"stream","text":["113/113 [==============================] - 0s 4ms/step - loss: 2.5640 - accuracy: 0.5430\n"],"name":"stdout"}]},{"cell_type":"markdown","metadata":{"id":"76P4UEyY0UHj"},"source":["**(e)  Bayesian optimization for hyper-parameter tuning:**\n"]},{"cell_type":"code","metadata":{"id":"1UOWb70hQrh1","executionInfo":{"status":"ok","timestamp":1603304675126,"user_tz":300,"elapsed":1822294,"user":{"displayName":"Qusai Amer","photoUrl":"https://lh6.googleusercontent.com/-jAP82gBhj-8/AAAAAAAAAAI/AAAAAAAAA9Y/SV0jzmWT_-E/s64/photo.jpg","userId":"00843738786401489735"}},"outputId":"07d13942-4e1f-4c6d-8c9a-72f7fc4cb9e1","colab":{"base_uri":"https://localhost:8080/","height":2244}},"source":["from hyperopt import hp, fmin, tpe, STATUS_OK, Trials\n","\n","\n","def optimize_cnn(hyperparameter):\n","  \n","  # Define model using hyperparameters \n","  cnn_model = Sequential([Conv2D(64, kernel_size=hyperparameter['conv_kernel_size'], activation='relu', input_shape=(48,48,1)), \n","            MaxPooling2D(pool_size=(2,2)), Dropout(hyperparameter['dropout_prob']),\n","            Conv2D(64, kernel_size=hyperparameter['conv_kernel_size'], activation='relu'),\n","            Conv2D(64, kernel_size=hyperparameter['conv_kernel_size'], activation='relu'), \n","            MaxPooling2D(pool_size=(2,2)), Dropout(hyperparameter['dropout_prob']), \n","            Flatten(),\n","            Dense(2304//4, activation='relu'), \n","            Dense(7, activation='softmax'),])\n","  \n","  cnn_model.compile(optimizer='adam', loss='categorical_crossentropy', metrics=['accuracy'],)\n","\n","  # create a training (50K samples) and validation (10K samples) subsets from training images.\n","  # Validation subset will be used to find the optimal hyperparameters\n","\n","  train_images_3d = imgs_train.reshape(28709,48,48,1)\n","  val_images_3d = imgs_val.reshape(3589,48,48,1)\n","  test_images_3d = imgs_test.reshape(3589,48,48,1)\n","\n","  _ = cnn_model.fit(train_images_3d, to_categorical(labels_train), epochs=hyperparameter['epochs'], batch_size=hyperparameter['batch_size'], verbose=0)\n","  # Evaluate accuracy on validation data\n","  performance = cnn_model.evaluate(val_images_3d, to_categorical(labels_val), verbose=0)\n","\n","  print(\"Hyperparameters: \", hyperparameter, \"Accuracy: \", performance[1])\n","  print(\"----------------------------------------------------\")\n","  # We want to minimize loss i.e. negative of accuracy\n","  return({\"status\": STATUS_OK, \"loss\": -1*performance[1], \"model\":cnn_model})\n","  \n","\n","# Define search space for hyper-parameters\n","space = {\n","    # The kernel_size for convolutions:\n","    'conv_kernel_size': hp.choice('conv_kernel_size', [1, 3, 5]),\n","    # Uniform distribution in finding appropriate dropout values\n","    'dropout_prob': hp.uniform('dropout_prob', 0.1, 0.35),\n","    # Choice of optimizer \n","    # 'optimizer': hp.choice('optimizer', ['Adam', 'sgd']),\n","    # Number of minibatch size\n","    'batch_size': hp.choice('batch_size', [100,250,400]),\n","    # Number of epochs\n","    'epochs': hp.choice('epochs', [5,10,15]),\n","\n","}\n","\n","trials = Trials()\n","\n","# Find the best hyperparameters\n","best = fmin(\n","        optimize_cnn,\n","        space,\n","        algo=tpe.suggest,\n","        trials=trials,\n","        max_evals=25,\n","    )\n","\n","print(\"==================================\")\n","print(\"Best Hyperparameters\", best)\n","\n","# You can retrain the final model with optimal hyperparameters on train+validation data\n","\n","# Or you can use the model returned directly\n","# Find trial which has minimum loss value and use that model to perform evaluation on the test data\n","test_model = trials.results[np.argmin([r['loss'] for r in trials.results])]['model']\n","\n","performance = test_model.evaluate(test_images_3d, to_categorical(labels_test))\n","\n","print(\"==================================\")\n","print(\"Test Accuracy: \", performance[1])"],"execution_count":103,"outputs":[{"output_type":"stream","text":["Hyperparameters: \n","{'batch_size': 400, 'conv_kernel_size': 1, 'dropout_prob': 0.2552166182511348, 'epochs': 10}\n","Accuracy: \n","0.26776260137557983\n","----------------------------------------------------\n","Hyperparameters: \n","{'batch_size': 400, 'conv_kernel_size': 5, 'dropout_prob': 0.321748559807872, 'epochs': 15}\n","Accuracy: \n","0.2496517151594162\n","----------------------------------------------------\n","Hyperparameters: \n","{'batch_size': 100, 'conv_kernel_size': 1, 'dropout_prob': 0.10381893795632541, 'epochs': 10}\n","Accuracy: \n","0.2975759208202362\n","----------------------------------------------------\n","Hyperparameters: \n","{'batch_size': 400, 'conv_kernel_size': 5, 'dropout_prob': 0.28062092134306416, 'epochs': 15}\n","Accuracy: \n","0.2543884217739105\n","----------------------------------------------------\n","Hyperparameters: \n","{'batch_size': 100, 'conv_kernel_size': 1, 'dropout_prob': 0.30444768290037993, 'epochs': 10}\n","Accuracy: \n","0.18250209093093872\n","----------------------------------------------------\n","Hyperparameters: \n","{'batch_size': 400, 'conv_kernel_size': 5, 'dropout_prob': 0.3347198137048819, 'epochs': 10}\n","Accuracy: \n","0.24937307834625244\n","----------------------------------------------------\n","Hyperparameters: \n","{'batch_size': 400, 'conv_kernel_size': 1, 'dropout_prob': 0.242089068596304, 'epochs': 15}\n","Accuracy: \n","0.28587350249290466\n","----------------------------------------------------\n","Hyperparameters: \n","{'batch_size': 400, 'conv_kernel_size': 5, 'dropout_prob': 0.13609338247392272, 'epochs': 15}\n","Accuracy: \n","0.492337703704834\n","----------------------------------------------------\n","Hyperparameters: \n","{'batch_size': 100, 'conv_kernel_size': 5, 'dropout_prob': 0.3100995525427845, 'epochs': 10}\n","Accuracy: \n","0.5190861225128174\n","----------------------------------------------------\n","Hyperparameters: \n","{'batch_size': 100, 'conv_kernel_size': 1, 'dropout_prob': 0.29879732826168526, 'epochs': 5}\n","Accuracy: \n","0.2574533224105835\n","----------------------------------------------------\n","Hyperparameters: \n","{'batch_size': 100, 'conv_kernel_size': 3, 'dropout_prob': 0.23341791239623988, 'epochs': 5}\n","Accuracy: \n","0.4054054021835327\n","----------------------------------------------------\n","Hyperparameters: \n","{'batch_size': 100, 'conv_kernel_size': 3, 'dropout_prob': 0.28725699296253904, 'epochs': 5}\n","Accuracy: \n","0.25299525260925293\n","----------------------------------------------------\n","Hyperparameters: \n","{'batch_size': 400, 'conv_kernel_size': 3, 'dropout_prob': 0.15869466786910302, 'epochs': 5}\n","Accuracy: \n","0.24937307834625244\n","----------------------------------------------------\n","Hyperparameters: \n","{'batch_size': 400, 'conv_kernel_size': 5, 'dropout_prob': 0.259415928734978, 'epochs': 10}\n","Accuracy: \n","0.2510448694229126\n","----------------------------------------------------\n","Hyperparameters: \n","{'batch_size': 400, 'conv_kernel_size': 1, 'dropout_prob': 0.19463920218089603, 'epochs': 10}\n","Accuracy: \n","0.2552242875099182\n","----------------------------------------------------\n","Hyperparameters: \n","{'batch_size': 400, 'conv_kernel_size': 1, 'dropout_prob': 0.23320988200079962, 'epochs': 15}\n","Accuracy: \n","0.2864307463169098\n","----------------------------------------------------\n","Hyperparameters: \n","{'batch_size': 250, 'conv_kernel_size': 1, 'dropout_prob': 0.29503382193293465, 'epochs': 10}\n","Accuracy: \n","0.1819448322057724\n","----------------------------------------------------\n","Hyperparameters: \n","{'batch_size': 100, 'conv_kernel_size': 5, 'dropout_prob': 0.3335453518497369, 'epochs': 10}\n","Accuracy: \n","0.24993033707141876\n","----------------------------------------------------\n","Hyperparameters: \n","{'batch_size': 250, 'conv_kernel_size': 5, 'dropout_prob': 0.33123040982820473, 'epochs': 15}\n","Accuracy: \n","0.24937307834625244\n","----------------------------------------------------\n","Hyperparameters: \n","{'batch_size': 250, 'conv_kernel_size': 1, 'dropout_prob': 0.20673076518349093, 'epochs': 15}\n","Accuracy: \n","0.26636946201324463\n","----------------------------------------------------\n","Hyperparameters: \n","{'batch_size': 100, 'conv_kernel_size': 5, 'dropout_prob': 0.10720332852896963, 'epochs': 15}\n","Accuracy: \n","0.2496517151594162\n","----------------------------------------------------\n","Hyperparameters: \n","{'batch_size': 250, 'conv_kernel_size': 5, 'dropout_prob': 0.14578082401259945, 'epochs': 15}\n","Accuracy: \n","0.48983004689216614\n","----------------------------------------------------\n","Hyperparameters: \n","{'batch_size': 100, 'conv_kernel_size': 5, 'dropout_prob': 0.14008650730474434, 'epochs': 15}\n","Accuracy: \n","0.49902480840682983\n","----------------------------------------------------\n","Hyperparameters: \n","{'batch_size': 100, 'conv_kernel_size': 5, 'dropout_prob': 0.1797611610833404, 'epochs': 10}\n","Accuracy: \n","0.25132349133491516\n","----------------------------------------------------\n","Hyperparameters: \n","{'batch_size': 100, 'conv_kernel_size': 5, 'dropout_prob': 0.11621585110225076, 'epochs': 15}\n","Accuracy: \n","0.24993033707141876\n","----------------------------------------------------\n","100%|██████████| 25/25 [30:21<00:00, 72.84s/it, best loss: -0.5190861225128174]\n","==================================\n","Best Hyperparameters {'batch_size': 0, 'conv_kernel_size': 2, 'dropout_prob': 0.3100995525427845, 'epochs': 1}\n","113/113 [==============================] - 1s 6ms/step - loss: 1.2772 - accuracy: 0.5171\n","==================================\n","Test Accuracy:  0.5171356797218323\n"],"name":"stdout"}]},{"cell_type":"markdown","metadata":{"id":"3M3Gx4M9FqAd"},"source":[" **(f) Fine-tuning: Use a pre-trained CNN (e.g., the pre-trained example of\n","the MNIST dataset that we saw in class) and fine-tune it on the FER data**"]},{"cell_type":"code","metadata":{"id":"hi6W431EDr3Y","executionInfo":{"status":"ok","timestamp":1603328925063,"user_tz":300,"elapsed":838,"user":{"displayName":"Qusai Amer","photoUrl":"https://lh6.googleusercontent.com/-jAP82gBhj-8/AAAAAAAAAAI/AAAAAAAAA9Y/SV0jzmWT_-E/s64/photo.jpg","userId":"00843738786401489735"}},"outputId":"d2b3aa0b-c83b-41c7-da37-3a5f742883e9","colab":{"base_uri":"https://localhost:8080/","height":333}},"source":[" #Load MNISt dataset\n","(train_images, train_labels), (test_images, test_labels) = mnist.load_data()\n","\n","# Check number of samples (60000 in training and 10000 in test)\n","# Each image has 28 x 28 pixels\n","print(\"Train Image Shape: \", train_images.shape, \"Train Label Shape: \", train_labels.shape) \n","print(type(train_images))\n","print(\"Test Image Shape: \", test_images.shape, \"Test Label Shape: \", test_labels.shape) \n","\n","#  Visualizing a random image (11th) from training dataset\n","print(\"Visualizing a random image (11th) from training dataset\")\n","_ = plt.imshow(train_images[10])"],"execution_count":57,"outputs":[{"output_type":"stream","text":["Train Image Shape:  (60000, 28, 28) Train Label Shape:  (60000,)\n","<class 'numpy.ndarray'>\n","Test Image Shape:  (10000, 28, 28) Test Label Shape:  (10000,)\n","Visualizing a random image (11th) from training dataset\n"],"name":"stdout"},{"output_type":"display_data","data":{"image/png":"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\n","text/plain":["<Figure size 432x288 with 1 Axes>"]},"metadata":{"tags":[],"needs_background":"light"}}]},{"cell_type":"markdown","metadata":{"id":"SWWNaUWTyQsu"},"source":["Fine-tuning Combaniation One"]},{"cell_type":"code","metadata":{"id":"BZeEJyllRAaa","executionInfo":{"status":"ok","timestamp":1603329015380,"user_tz":300,"elapsed":27392,"user":{"displayName":"Qusai Amer","photoUrl":"https://lh6.googleusercontent.com/-jAP82gBhj-8/AAAAAAAAAAI/AAAAAAAAA9Y/SV0jzmWT_-E/s64/photo.jpg","userId":"00843738786401489735"}},"outputId":"fea49ce1-79b1-4a67-abe8-69c6b48b3355","colab":{"base_uri":"https://localhost:8080/","height":850}},"source":["from keras.layers import Conv2D, Flatten, MaxPooling2D\n","\n","\n","# Define 2 groups of layers: features layer (convolutions) and classification layer\n","model2 = Sequential([Conv2D(32, kernel_size=3, activation='relu', input_shape=(28,28,1)), \n","            Conv2D(32, kernel_size=3, activation='relu'), \n","            MaxPooling2D(pool_size=(2,2)),\n","            Conv2D(64, kernel_size=3, activation='relu'),\n","            Conv2D(64, kernel_size=3, activation='relu'), \n","            MaxPooling2D(pool_size=(2,2)), Flatten(),\n","            Dense(512, activation='relu'), \n","            Dense(10, activation='softmax'),])\n","\n","\n","print(model2.summary())  # Compare number of parameteres against FFN\n","model2.compile(optimizer='sgd', loss='categorical_crossentropy',metrics=['accuracy'],)\n","\n","train_images_3d2 = train_images.reshape(60000,28,28,1)\n","test_images_3d2 = test_images.reshape(10000,28,28,1)\n","\n","model2.fit(train_images_3d2, to_categorical(train_labels), epochs=10, batch_size=256,)\n","performance = model2.evaluate(test_images_3d2, to_categorical(test_labels))\n","\n","print(\"Accuracy on Test samples: {0}\".format(performance[1]))\n"],"execution_count":58,"outputs":[{"output_type":"stream","text":["Model: \"sequential_4\"\n","_________________________________________________________________\n","Layer (type)                 Output Shape              Param #   \n","=================================================================\n","conv2d_11 (Conv2D)           (None, 26, 26, 32)        320       \n","_________________________________________________________________\n","conv2d_12 (Conv2D)           (None, 24, 24, 32)        9248      \n","_________________________________________________________________\n","max_pooling2d_6 (MaxPooling2 (None, 12, 12, 32)        0         \n","_________________________________________________________________\n","conv2d_13 (Conv2D)           (None, 10, 10, 64)        18496     \n","_________________________________________________________________\n","conv2d_14 (Conv2D)           (None, 8, 8, 64)          36928     \n","_________________________________________________________________\n","max_pooling2d_7 (MaxPooling2 (None, 4, 4, 64)          0         \n","_________________________________________________________________\n","flatten_3 (Flatten)          (None, 1024)              0         \n","_________________________________________________________________\n","dense_12 (Dense)             (None, 512)               524800    \n","_________________________________________________________________\n","dense_13 (Dense)             (None, 10)                5130      \n","=================================================================\n","Total params: 594,922\n","Trainable params: 594,922\n","Non-trainable params: 0\n","_________________________________________________________________\n","None\n","Epoch 1/10\n","235/235 [==============================] - 3s 11ms/step - loss: 2.6015 - accuracy: 0.4120\n","Epoch 2/10\n","235/235 [==============================] - 3s 11ms/step - loss: 0.2296 - accuracy: 0.9290\n","Epoch 3/10\n","235/235 [==============================] - 3s 11ms/step - loss: 0.1307 - accuracy: 0.9594\n","Epoch 4/10\n","235/235 [==============================] - 3s 11ms/step - loss: 0.0905 - accuracy: 0.9717\n","Epoch 5/10\n","235/235 [==============================] - 3s 11ms/step - loss: 0.0722 - accuracy: 0.9780\n","Epoch 6/10\n","235/235 [==============================] - 3s 11ms/step - loss: 0.0609 - accuracy: 0.9814\n","Epoch 7/10\n","235/235 [==============================] - 3s 11ms/step - loss: 0.0537 - accuracy: 0.9836\n","Epoch 8/10\n","235/235 [==============================] - 3s 11ms/step - loss: 0.0463 - accuracy: 0.9859\n","Epoch 9/10\n","235/235 [==============================] - 3s 11ms/step - loss: 0.0420 - accuracy: 0.9870\n","Epoch 10/10\n","235/235 [==============================] - 3s 11ms/step - loss: 0.0370 - accuracy: 0.9884\n","313/313 [==============================] - 1s 2ms/step - loss: 0.0565 - accuracy: 0.9814\n","Accuracy on Test samples: 0.9814000129699707\n"],"name":"stdout"}]},{"cell_type":"code","metadata":{"id":"gXe7F8EHDj_Q","executionInfo":{"status":"ok","timestamp":1603329024736,"user_tz":300,"elapsed":487,"user":{"displayName":"Qusai Amer","photoUrl":"https://lh6.googleusercontent.com/-jAP82gBhj-8/AAAAAAAAAAI/AAAAAAAAA9Y/SV0jzmWT_-E/s64/photo.jpg","userId":"00843738786401489735"}},"outputId":"42c8f053-6629-41cc-c0e4-8b3203dec35c","colab":{"base_uri":"https://localhost:8080/","height":408}},"source":["model2.pop()\n","model2.pop()\n","print(model2.summary())\n","\n"],"execution_count":59,"outputs":[{"output_type":"stream","text":["Model: \"sequential_4\"\n","_________________________________________________________________\n","Layer (type)                 Output Shape              Param #   \n","=================================================================\n","conv2d_11 (Conv2D)           (None, 26, 26, 32)        320       \n","_________________________________________________________________\n","conv2d_12 (Conv2D)           (None, 24, 24, 32)        9248      \n","_________________________________________________________________\n","max_pooling2d_6 (MaxPooling2 (None, 12, 12, 32)        0         \n","_________________________________________________________________\n","conv2d_13 (Conv2D)           (None, 10, 10, 64)        18496     \n","_________________________________________________________________\n","conv2d_14 (Conv2D)           (None, 8, 8, 64)          36928     \n","_________________________________________________________________\n","max_pooling2d_7 (MaxPooling2 (None, 4, 4, 64)          0         \n","_________________________________________________________________\n","flatten_3 (Flatten)          (None, 1024)              0         \n","=================================================================\n","Total params: 64,992\n","Trainable params: 64,992\n","Non-trainable params: 0\n","_________________________________________________________________\n","None\n"],"name":"stdout"}]},{"cell_type":"code","metadata":{"id":"RrQJ2RD2Eq4z","executionInfo":{"status":"ok","timestamp":1603329028246,"user_tz":300,"elapsed":396,"user":{"displayName":"Qusai Amer","photoUrl":"https://lh6.googleusercontent.com/-jAP82gBhj-8/AAAAAAAAAAI/AAAAAAAAA9Y/SV0jzmWT_-E/s64/photo.jpg","userId":"00843738786401489735"}},"outputId":"4536e44a-96d6-40ae-f69e-e5d511ccbd13","colab":{"base_uri":"https://localhost:8080/","height":442}},"source":["model2.add(Dense(7,activation='softmax'))\n","print(model2.summary())\n"],"execution_count":60,"outputs":[{"output_type":"stream","text":["Model: \"sequential_4\"\n","_________________________________________________________________\n","Layer (type)                 Output Shape              Param #   \n","=================================================================\n","conv2d_11 (Conv2D)           (None, 26, 26, 32)        320       \n","_________________________________________________________________\n","conv2d_12 (Conv2D)           (None, 24, 24, 32)        9248      \n","_________________________________________________________________\n","max_pooling2d_6 (MaxPooling2 (None, 12, 12, 32)        0         \n","_________________________________________________________________\n","conv2d_13 (Conv2D)           (None, 10, 10, 64)        18496     \n","_________________________________________________________________\n","conv2d_14 (Conv2D)           (None, 8, 8, 64)          36928     \n","_________________________________________________________________\n","max_pooling2d_7 (MaxPooling2 (None, 4, 4, 64)          0         \n","_________________________________________________________________\n","flatten_3 (Flatten)          (None, 1024)              0         \n","_________________________________________________________________\n","dense_14 (Dense)             (None, 7)                 7175      \n","=================================================================\n","Total params: 72,167\n","Trainable params: 72,167\n","Non-trainable params: 0\n","_________________________________________________________________\n","None\n"],"name":"stdout"}]},{"cell_type":"code","metadata":{"id":"yiRtRrKeJPsk","executionInfo":{"status":"ok","timestamp":1603329035655,"user_tz":300,"elapsed":893,"user":{"displayName":"Qusai Amer","photoUrl":"https://lh6.googleusercontent.com/-jAP82gBhj-8/AAAAAAAAAAI/AAAAAAAAA9Y/SV0jzmWT_-E/s64/photo.jpg","userId":"00843738786401489735"}}},"source":["import cv2\n","# Resize Trian \n","resized_images = []\n","train_images_3d = imgs_train.reshape(28709,48,48,1)\n","\n","for img in train_images_3d:\n","        img = img.reshape((48,48)).astype('float32')  # <-- convert image to float32\n","        resized_img = cv2.resize(img, dsize=(28, 28))\n","        resized_images.append(resized_img)\n","resized_images_train = np.array(resized_images)\n","\n","# Resize Validation \n","resized_images_val = []\n","train_images_3d = imgs_train.reshape(28709,48,48,1)\n","\n","for img in val_images_3d:\n","        img = img.reshape((48,48)).astype('float32')  # <-- convert image to float32\n","        resized_img_val = cv2.resize(img, dsize=(28, 28))\n","        resized_images_val.append(resized_img)\n","resized_images_val = np.array(resized_images_val)\n","\n","# Resize Trian \n","resized_images_test = []\n","train_images_3d = imgs_train.reshape(28709,48,48,1)\n","\n","for img in test_images_3d:\n","        img = img.reshape((48,48)).astype('float32')  # <-- convert image to float32\n","        resized_img_test = cv2.resize(img, dsize=(28, 28))\n","        resized_images_test.append(resized_img)\n","resized_images_test = np.array(resized_images_test)"],"execution_count":61,"outputs":[]},{"cell_type":"code","metadata":{"id":"OB9TI5Gtg2EA","executionInfo":{"status":"ok","timestamp":1603329036770,"user_tz":300,"elapsed":319,"user":{"displayName":"Qusai Amer","photoUrl":"https://lh6.googleusercontent.com/-jAP82gBhj-8/AAAAAAAAAAI/AAAAAAAAA9Y/SV0jzmWT_-E/s64/photo.jpg","userId":"00843738786401489735"}},"outputId":"9d65555d-f362-4ddc-cfd1-d6bf8c7cdff4","colab":{"base_uri":"https://localhost:8080/","height":34}},"source":["resized_images_test.shape"],"execution_count":62,"outputs":[{"output_type":"execute_result","data":{"text/plain":["(3589, 28, 28)"]},"metadata":{"tags":[]},"execution_count":62}]},{"cell_type":"code","metadata":{"id":"lyYY4TSJhVQ3","executionInfo":{"status":"ok","timestamp":1603327526708,"user_tz":300,"elapsed":21071,"user":{"displayName":"Qusai Amer","photoUrl":"https://lh6.googleusercontent.com/-jAP82gBhj-8/AAAAAAAAAAI/AAAAAAAAA9Y/SV0jzmWT_-E/s64/photo.jpg","userId":"00843738786401489735"}},"outputId":"da1d38da-ab86-49c9-8784-92a89920ff00","colab":{"base_uri":"https://localhost:8080/","height":714}},"source":["model2.compile(optimizer='adam', loss='categorical_crossentropy',metrics=['accuracy'],)\n","\n","train_images_3d3 = resized_images_train.reshape(28709,28,28,1)\n","val_images_3d3 = resized_images_val.reshape(3589,28,28,1)\n","test_images_3d3 = resized_images_test.reshape(3589,28,28,1)\n","\n","\n","model2.fit(train_images_3d3, to_categorical(labels_train), epochs=20, batch_size=1000,)\n","performance = model2.evaluate(val_images_3d3, to_categorical(labels_val))"],"execution_count":28,"outputs":[{"output_type":"stream","text":["Epoch 1/20\n","29/29 [==============================] - 1s 39ms/step - loss: 2.2167 - accuracy: 0.2187\n","Epoch 2/20\n","29/29 [==============================] - 1s 33ms/step - loss: 1.7401 - accuracy: 0.2993\n","Epoch 3/20\n","29/29 [==============================] - 1s 33ms/step - loss: 1.6571 - accuracy: 0.3471\n","Epoch 4/20\n","29/29 [==============================] - 1s 32ms/step - loss: 1.5904 - accuracy: 0.3864\n","Epoch 5/20\n","29/29 [==============================] - 1s 33ms/step - loss: 1.5301 - accuracy: 0.4093\n","Epoch 6/20\n","29/29 [==============================] - 1s 33ms/step - loss: 1.4865 - accuracy: 0.4304\n","Epoch 7/20\n","29/29 [==============================] - 1s 33ms/step - loss: 1.4459 - accuracy: 0.4463\n","Epoch 8/20\n","29/29 [==============================] - 1s 33ms/step - loss: 1.4122 - accuracy: 0.4630\n","Epoch 9/20\n","29/29 [==============================] - 1s 33ms/step - loss: 1.3783 - accuracy: 0.4753\n","Epoch 10/20\n","29/29 [==============================] - 1s 33ms/step - loss: 1.3448 - accuracy: 0.4927\n","Epoch 11/20\n","29/29 [==============================] - 1s 33ms/step - loss: 1.3182 - accuracy: 0.5037\n","Epoch 12/20\n","29/29 [==============================] - 1s 33ms/step - loss: 1.2869 - accuracy: 0.5165\n","Epoch 13/20\n","29/29 [==============================] - 1s 33ms/step - loss: 1.2623 - accuracy: 0.5267\n","Epoch 14/20\n","29/29 [==============================] - 1s 33ms/step - loss: 1.2258 - accuracy: 0.5430\n","Epoch 15/20\n","29/29 [==============================] - 1s 33ms/step - loss: 1.2060 - accuracy: 0.5537\n","Epoch 16/20\n","29/29 [==============================] - 1s 33ms/step - loss: 1.1784 - accuracy: 0.5653\n","Epoch 17/20\n","29/29 [==============================] - 1s 33ms/step - loss: 1.1524 - accuracy: 0.5706\n","Epoch 18/20\n","29/29 [==============================] - 1s 33ms/step - loss: 1.1178 - accuracy: 0.5870\n","Epoch 19/20\n","29/29 [==============================] - 1s 33ms/step - loss: 1.1003 - accuracy: 0.5937\n","Epoch 20/20\n","29/29 [==============================] - 1s 33ms/step - loss: 1.0716 - accuracy: 0.6055\n","113/113 [==============================] - 0s 2ms/step - loss: 2.0902 - accuracy: 0.1819\n"],"name":"stdout"}]},{"cell_type":"markdown","metadata":{"id":"9HuQHT1jyXE4"},"source":["Fine-tuning Combination Two"]},{"cell_type":"code","metadata":{"id":"enAcLwmdyfff","executionInfo":{"status":"ok","timestamp":1603329147192,"user_tz":300,"elapsed":26948,"user":{"displayName":"Qusai Amer","photoUrl":"https://lh6.googleusercontent.com/-jAP82gBhj-8/AAAAAAAAAAI/AAAAAAAAA9Y/SV0jzmWT_-E/s64/photo.jpg","userId":"00843738786401489735"}},"outputId":"e9f5c411-fc3a-4901-cdae-ff2aedaa816c","colab":{"base_uri":"https://localhost:8080/","height":850}},"source":["from keras.layers import Conv2D, Flatten, MaxPooling2D\n","\n","\n","# Define 2 groups of layers: features layer (convolutions) and classification layer\n","model2 = Sequential([Conv2D(32, kernel_size=3, activation='relu', input_shape=(28,28,1)), \n","            Conv2D(32, kernel_size=3, activation='relu'), \n","            MaxPooling2D(pool_size=(2,2)),\n","            Conv2D(64, kernel_size=3, activation='relu'),\n","            Conv2D(64, kernel_size=3, activation='relu'), \n","            MaxPooling2D(pool_size=(2,2)), Flatten(),\n","            Dense(512, activation='relu'), \n","            Dense(10, activation='softmax'),])\n","\n","\n","print(model2.summary())  # Compare number of parameteres against FFN\n","model2.compile(optimizer='sgd', loss='categorical_crossentropy',metrics=['accuracy'],)\n","\n","train_images_3d2 = train_images.reshape(60000,28,28,1)\n","test_images_3d2 = test_images.reshape(10000,28,28,1)\n","\n","model2.fit(train_images_3d2, to_categorical(train_labels), epochs=10, batch_size=256,)\n","performance = model2.evaluate(test_images_3d2, to_categorical(test_labels))\n","\n","print(\"Accuracy on Test samples: {0}\".format(performance[1]))\n","\n","\n","\n","\n","\n","\n"],"execution_count":65,"outputs":[{"output_type":"stream","text":["Model: \"sequential_5\"\n","_________________________________________________________________\n","Layer (type)                 Output Shape              Param #   \n","=================================================================\n","conv2d_15 (Conv2D)           (None, 26, 26, 32)        320       \n","_________________________________________________________________\n","conv2d_16 (Conv2D)           (None, 24, 24, 32)        9248      \n","_________________________________________________________________\n","max_pooling2d_8 (MaxPooling2 (None, 12, 12, 32)        0         \n","_________________________________________________________________\n","conv2d_17 (Conv2D)           (None, 10, 10, 64)        18496     \n","_________________________________________________________________\n","conv2d_18 (Conv2D)           (None, 8, 8, 64)          36928     \n","_________________________________________________________________\n","max_pooling2d_9 (MaxPooling2 (None, 4, 4, 64)          0         \n","_________________________________________________________________\n","flatten_4 (Flatten)          (None, 1024)              0         \n","_________________________________________________________________\n","dense_15 (Dense)             (None, 512)               524800    \n","_________________________________________________________________\n","dense_16 (Dense)             (None, 10)                5130      \n","=================================================================\n","Total params: 594,922\n","Trainable params: 594,922\n","Non-trainable params: 0\n","_________________________________________________________________\n","None\n","Epoch 1/10\n","235/235 [==============================] - 3s 11ms/step - loss: nan - accuracy: 0.0988\n","Epoch 2/10\n","235/235 [==============================] - 3s 11ms/step - loss: nan - accuracy: 0.0987\n","Epoch 3/10\n","235/235 [==============================] - 2s 11ms/step - loss: nan - accuracy: 0.0987\n","Epoch 4/10\n","235/235 [==============================] - 3s 11ms/step - loss: nan - accuracy: 0.0987\n","Epoch 5/10\n","235/235 [==============================] - 3s 11ms/step - loss: nan - accuracy: 0.0987\n","Epoch 6/10\n","235/235 [==============================] - 3s 11ms/step - loss: nan - accuracy: 0.0987\n","Epoch 7/10\n","235/235 [==============================] - 3s 11ms/step - loss: nan - accuracy: 0.0987\n","Epoch 8/10\n","235/235 [==============================] - 3s 11ms/step - loss: nan - accuracy: 0.0987\n","Epoch 9/10\n","235/235 [==============================] - 3s 11ms/step - loss: nan - accuracy: 0.0987\n","Epoch 10/10\n","235/235 [==============================] - 3s 11ms/step - loss: nan - accuracy: 0.0987\n","313/313 [==============================] - 1s 2ms/step - loss: nan - accuracy: 0.0980\n","Accuracy on Test samples: 0.09799999743700027\n"],"name":"stdout"}]},{"cell_type":"code","metadata":{"id":"x_FS7n1Fyfqh","executionInfo":{"status":"ok","timestamp":1603329147504,"user_tz":300,"elapsed":27014,"user":{"displayName":"Qusai Amer","photoUrl":"https://lh6.googleusercontent.com/-jAP82gBhj-8/AAAAAAAAAAI/AAAAAAAAA9Y/SV0jzmWT_-E/s64/photo.jpg","userId":"00843738786401489735"}},"outputId":"dc71f5af-4f79-465c-9641-fb95dd054785","colab":{"base_uri":"https://localhost:8080/","height":476}},"source":["model2.pop()\n","model2.pop()\n","model2.add(Dense(2403//4,activation='softmax'))\n","model2.add(Dense(7,activation='softmax'))\n","print(model2.summary())\n"],"execution_count":66,"outputs":[{"output_type":"stream","text":["Model: \"sequential_5\"\n","_________________________________________________________________\n","Layer (type)                 Output Shape              Param #   \n","=================================================================\n","conv2d_15 (Conv2D)           (None, 26, 26, 32)        320       \n","_________________________________________________________________\n","conv2d_16 (Conv2D)           (None, 24, 24, 32)        9248      \n","_________________________________________________________________\n","max_pooling2d_8 (MaxPooling2 (None, 12, 12, 32)        0         \n","_________________________________________________________________\n","conv2d_17 (Conv2D)           (None, 10, 10, 64)        18496     \n","_________________________________________________________________\n","conv2d_18 (Conv2D)           (None, 8, 8, 64)          36928     \n","_________________________________________________________________\n","max_pooling2d_9 (MaxPooling2 (None, 4, 4, 64)          0         \n","_________________________________________________________________\n","flatten_4 (Flatten)          (None, 1024)              0         \n","_________________________________________________________________\n","dense_17 (Dense)             (None, 600)               615000    \n","_________________________________________________________________\n","dense_18 (Dense)             (None, 7)                 4207      \n","=================================================================\n","Total params: 684,199\n","Trainable params: 684,199\n","Non-trainable params: 0\n","_________________________________________________________________\n","None\n"],"name":"stdout"}]},{"cell_type":"code","metadata":{"id":"sMtgxVNoyfzL","executionInfo":{"status":"ok","timestamp":1603329311054,"user_tz":300,"elapsed":28882,"user":{"displayName":"Qusai Amer","photoUrl":"https://lh6.googleusercontent.com/-jAP82gBhj-8/AAAAAAAAAAI/AAAAAAAAA9Y/SV0jzmWT_-E/s64/photo.jpg","userId":"00843738786401489735"}},"outputId":"429b7b56-f4eb-43a4-e346-38ce1d286061","colab":{"base_uri":"https://localhost:8080/","height":204}},"source":["model2.compile(optimizer='adam', loss='categorical_crossentropy',metrics=['accuracy'],)\n","\n","train_images_3d3 = resized_images_train.reshape(28709,28,28,1)\n","val_images_3d3 = resized_images_val.reshape(3589,28,28,1)\n","test_images_3d3 = resized_images_test.reshape(3589,28,28,1)\n","\n","\n","model2.fit(train_images_3d3, to_categorical(labels_train), epochs=5, batch_size=20,)\n","performance = model2.evaluate(val_images_3d3, to_categorical(labels_val))"],"execution_count":68,"outputs":[{"output_type":"stream","text":["Epoch 1/5\n","1436/1436 [==============================] - 6s 4ms/step - loss: 1.8099 - accuracy: 0.2513\n","Epoch 2/5\n","1436/1436 [==============================] - 6s 4ms/step - loss: 1.8099 - accuracy: 0.2513\n","Epoch 3/5\n","1436/1436 [==============================] - 5s 4ms/step - loss: 1.8100 - accuracy: 0.2513\n","Epoch 4/5\n","1436/1436 [==============================] - 5s 4ms/step - loss: 1.8100 - accuracy: 0.2513\n","Epoch 5/5\n","1436/1436 [==============================] - 5s 4ms/step - loss: 1.8100 - accuracy: 0.2513\n","113/113 [==============================] - 0s 3ms/step - loss: 1.8120 - accuracy: 0.2494\n"],"name":"stdout"}]},{"cell_type":"markdown","metadata":{"id":"11qd4z7b3_Kh"},"source":["Fine-tuning Combination three"]},{"cell_type":"code","metadata":{"id":"031oPPAo3_VW","executionInfo":{"status":"ok","timestamp":1603329588720,"user_tz":300,"elapsed":53473,"user":{"displayName":"Qusai Amer","photoUrl":"https://lh6.googleusercontent.com/-jAP82gBhj-8/AAAAAAAAAAI/AAAAAAAAA9Y/SV0jzmWT_-E/s64/photo.jpg","userId":"00843738786401489735"}},"outputId":"72e3e675-11b7-44ce-ae80-1db5d7c48372","colab":{"base_uri":"https://localhost:8080/","height":1496}},"source":["from keras.layers import Conv2D, Flatten, MaxPooling2D\n","\n","\n","# Define 2 groups of layers: features layer (convolutions) and classification layer\n","model2 = Sequential([Conv2D(32, kernel_size=3, activation='relu', input_shape=(28,28,1)), \n","            Conv2D(32, kernel_size=3, activation='relu'), \n","            MaxPooling2D(pool_size=(2,2)),\n","            Conv2D(64, kernel_size=3, activation='relu'),\n","            Conv2D(64, kernel_size=3, activation='relu'), \n","            MaxPooling2D(pool_size=(2,2)), Flatten(),\n","            Dense(512, activation='relu'), \n","            Dense(10, activation='softmax'),])\n","\n","\n","print(model2.summary())  # Compare number of parameteres against FFN\n","model2.compile(optimizer='sgd', loss='categorical_crossentropy',metrics=['accuracy'],)\n","\n","train_images_3d2 = train_images.reshape(60000,28,28,1)\n","test_images_3d2 = test_images.reshape(10000,28,28,1)\n","\n","model2.fit(train_images_3d2, to_categorical(train_labels), epochs=10, batch_size=256,)\n","performance = model2.evaluate(test_images_3d2, to_categorical(test_labels))\n","\n","print(\"Accuracy on Test samples: {0}\".format(performance[1]))\n","\n","\n","\n","model2.pop()\n","model2.pop()\n","model2.add(Dense(2403//4,activation='softmax'))\n","model2.add(Dense(7,activation='softmax'))\n","print(model2.summary())\n","\n","\n","\n","model2.compile(optimizer='adam', loss='categorical_crossentropy',metrics=['accuracy'],)\n","\n","train_images_3d3 = resized_images_train.reshape(28709,28,28,1)\n","val_images_3d3 = resized_images_val.reshape(3589,28,28,1)\n","test_images_3d3 = resized_images_test.reshape(3589,28,28,1)\n","\n","\n","model2.fit(train_images_3d3, to_categorical(labels_train), epochs=5, batch_size=20,)\n","performance = model2.evaluate(val_images_3d3, to_categorical(labels_val))"],"execution_count":72,"outputs":[{"output_type":"stream","text":["Model: \"sequential_8\"\n","_________________________________________________________________\n","Layer (type)                 Output Shape              Param #   \n","=================================================================\n","conv2d_27 (Conv2D)           (None, 26, 26, 32)        320       \n","_________________________________________________________________\n","conv2d_28 (Conv2D)           (None, 24, 24, 32)        9248      \n","_________________________________________________________________\n","max_pooling2d_14 (MaxPooling (None, 12, 12, 32)        0         \n","_________________________________________________________________\n","conv2d_29 (Conv2D)           (None, 10, 10, 64)        18496     \n","_________________________________________________________________\n","conv2d_30 (Conv2D)           (None, 8, 8, 64)          36928     \n","_________________________________________________________________\n","max_pooling2d_15 (MaxPooling (None, 4, 4, 64)          0         \n","_________________________________________________________________\n","flatten_7 (Flatten)          (None, 1024)              0         \n","_________________________________________________________________\n","dense_26 (Dense)             (None, 512)               524800    \n","_________________________________________________________________\n","dense_27 (Dense)             (None, 10)                5130      \n","=================================================================\n","Total params: 594,922\n","Trainable params: 594,922\n","Non-trainable params: 0\n","_________________________________________________________________\n","None\n","Epoch 1/10\n","235/235 [==============================] - 3s 11ms/step - loss: nan - accuracy: 0.0993\n","Epoch 2/10\n","235/235 [==============================] - 3s 11ms/step - loss: nan - accuracy: 0.0987\n","Epoch 3/10\n","235/235 [==============================] - 3s 11ms/step - loss: nan - accuracy: 0.0987\n","Epoch 4/10\n","235/235 [==============================] - 3s 11ms/step - loss: nan - accuracy: 0.0987\n","Epoch 5/10\n","235/235 [==============================] - 3s 11ms/step - loss: nan - accuracy: 0.0987\n","Epoch 6/10\n","235/235 [==============================] - 3s 11ms/step - loss: nan - accuracy: 0.0987\n","Epoch 7/10\n","235/235 [==============================] - 3s 11ms/step - loss: nan - accuracy: 0.0987\n","Epoch 8/10\n","235/235 [==============================] - 3s 11ms/step - loss: nan - accuracy: 0.0987\n","Epoch 9/10\n","235/235 [==============================] - 3s 11ms/step - loss: nan - accuracy: 0.0987\n","Epoch 10/10\n","235/235 [==============================] - 3s 11ms/step - loss: nan - accuracy: 0.0987\n","313/313 [==============================] - 1s 2ms/step - loss: nan - accuracy: 0.0980\n","Accuracy on Test samples: 0.09799999743700027\n","Model: \"sequential_8\"\n","_________________________________________________________________\n","Layer (type)                 Output Shape              Param #   \n","=================================================================\n","conv2d_27 (Conv2D)           (None, 26, 26, 32)        320       \n","_________________________________________________________________\n","conv2d_28 (Conv2D)           (None, 24, 24, 32)        9248      \n","_________________________________________________________________\n","max_pooling2d_14 (MaxPooling (None, 12, 12, 32)        0         \n","_________________________________________________________________\n","conv2d_29 (Conv2D)           (None, 10, 10, 64)        18496     \n","_________________________________________________________________\n","conv2d_30 (Conv2D)           (None, 8, 8, 64)          36928     \n","_________________________________________________________________\n","max_pooling2d_15 (MaxPooling (None, 4, 4, 64)          0         \n","_________________________________________________________________\n","flatten_7 (Flatten)          (None, 1024)              0         \n","_________________________________________________________________\n","dense_28 (Dense)             (None, 600)               615000    \n","_________________________________________________________________\n","dense_29 (Dense)             (None, 7)                 4207      \n","=================================================================\n","Total params: 684,199\n","Trainable params: 684,199\n","Non-trainable params: 0\n","_________________________________________________________________\n","None\n","Epoch 1/5\n","1436/1436 [==============================] - 5s 3ms/step - loss: 1.8416 - accuracy: 0.2510\n","Epoch 2/5\n","1436/1436 [==============================] - 5s 3ms/step - loss: 1.8110 - accuracy: 0.2513\n","Epoch 3/5\n","1436/1436 [==============================] - 5s 3ms/step - loss: 1.8100 - accuracy: 0.2513\n","Epoch 4/5\n","1436/1436 [==============================] - 5s 4ms/step - loss: 1.8100 - accuracy: 0.2513\n","Epoch 5/5\n","1436/1436 [==============================] - 5s 3ms/step - loss: 1.8100 - accuracy: 0.2513\n","113/113 [==============================] - 0s 3ms/step - loss: 1.8110 - accuracy: 0.2494\n"],"name":"stdout"}]},{"cell_type":"markdown","metadata":{"id":"2UbYCVBakhZR"},"source":["**(g) Feature design: In this part, you can try to extract image features\n","rather than learning them from the FNN or CNN models.**"]},{"cell_type":"code","metadata":{"id":"CY3xeUICk_MQ","executionInfo":{"status":"ok","timestamp":1603331805114,"user_tz":300,"elapsed":632,"user":{"displayName":"Qusai Amer","photoUrl":"https://lh6.googleusercontent.com/-jAP82gBhj-8/AAAAAAAAAAI/AAAAAAAAA9Y/SV0jzmWT_-E/s64/photo.jpg","userId":"00843738786401489735"}},"outputId":"2892ef4e-97cc-4dc6-8c1b-488536cde871","colab":{"base_uri":"https://localhost:8080/","height":250}},"source":["import matplotlib.pyplot as plt\n","\n","from skimage.feature import hog\n","from skimage import data, exposure\n","\n","image = imgs_train[0]\n","\n","# fd, hog_image = hog(image, orientations=100, pixels_per_cell=(48, 48),\n","#                     cells_per_block=(2, 2), visualize=True, multichannel=False)\n","fd, hog_image = hog(image, orientations=5, pixels_per_cell=(2, 2), \n","                   cells_per_block=(3, 3), block_norm='L2-Hys', visualize=True, \n","                   transform_sqrt=False, feature_vector=True, multichannel=False)\n","\n","fig, (ax1, ax2) = plt.subplots(1, 2, figsize=(8, 4), sharex=True, sharey=True)\n","\n","ax1.axis('off')\n","ax1.imshow(image,cmap=plt.cm.gray)\n","ax1.set_title('Input image')\n","\n","# Rescale histogram for better display\n","hog_image_rescaled = exposure.rescale_intensity(hog_image, in_range=(0, 100))\n","\n","ax2.axis('off')\n","ax2.imshow(hog_image_rescaled, cmap=plt.cm.gray)\n","ax2.set_title('Histogram of Oriented Gradients')\n","plt.show()"],"execution_count":197,"outputs":[{"output_type":"display_data","data":{"image/png":"\n","text/plain":["<Figure size 576x288 with 2 Axes>"]},"metadata":{"tags":[],"needs_background":"light"}}]},{"cell_type":"code","metadata":{"id":"TrnerzdR6dJ7","executionInfo":{"status":"ok","timestamp":1603331799396,"user_tz":300,"elapsed":535,"user":{"displayName":"Qusai Amer","photoUrl":"https://lh6.googleusercontent.com/-jAP82gBhj-8/AAAAAAAAAAI/AAAAAAAAA9Y/SV0jzmWT_-E/s64/photo.jpg","userId":"00843738786401489735"}},"outputId":"36ff94b6-575d-4610-cbc3-3782461e69e1","colab":{"base_uri":"https://localhost:8080/","height":250}},"source":["image = imgs_train[9]\n","\n","# fd, hog_image = hog(image, orientations=100, pixels_per_cell=(48, 48),\n","#                     cells_per_block=(2, 2), visualize=True, multichannel=False)\n","fd, hog_image = hog(image, orientations=5, pixels_per_cell=(2, 2), \n","                   cells_per_block=(3, 3), block_norm='L2-Hys', visualize=True, \n","                   transform_sqrt=False, feature_vector=True, multichannel=False)\n","\n","fig, (ax1, ax2) = plt.subplots(1, 2, figsize=(8, 4), sharex=True, sharey=True)\n","\n","ax1.axis('off')\n","ax1.imshow(image,cmap=plt.cm.gray)\n","ax1.set_title('Input image')\n","\n","# Rescale histogram for better display\n","hog_image_rescaled = exposure.rescale_intensity(hog_image, in_range=(0, 100))\n","\n","ax2.axis('off')\n","ax2.imshow(hog_image_rescaled, cmap=plt.cm.gray)\n","ax2.set_title('Histogram of Oriented Gradients')\n","plt.show()"],"execution_count":196,"outputs":[{"output_type":"display_data","data":{"image/png":"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\n","text/plain":["<Figure size 576x288 with 2 Axes>"]},"metadata":{"tags":[],"needs_background":"light"}}]},{"cell_type":"code","metadata":{"id":"be09npfnBbYQ"},"source":[""],"execution_count":null,"outputs":[]}]}